/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/chat-messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Chat Message
         * @description Create conversation message
         */
        post: operations["sendChatMessageByAppAdvancedChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat-messages/{task_id}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stop Response
         * @description Only supports streaming mode
         */
        post: operations["stopChatResponseByAppAdvancedChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload File
         * @description Upload files for use when sending messages.
         *     Supported file types depend on application type and configuration.
         *     Uploaded files are only available to the current end user.
         *
         */
        post: operations["uploadFileByAppAdvancedChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audio-to-text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Audio to Text */
        post: operations["convertAudioToTextByAppAdvancedChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/text-to-audio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Text to Audio */
        post: operations["convertTextToAudioByAppAdvancedChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Application Basic Information */
        get: operations["getApplicationInfoByAppAdvancedChat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parameters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Application Parameters */
        get: operations["getApplicationParametersByAppAdvancedChat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages/{message_id}/feedbacks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Message Feedback (Like/Dislike)
         * @description End user feedback on messages, likes/dislikes, to help application developers optimize output expectations.
         */
        post: operations["sendMessageFeedbackByAppAdvancedChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages/{message_id}/suggested": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Suggested Questions for Next Round
         * @description Get a list of suggested questions for the next round.
         */
        get: operations["getSuggestedQuestionsByAppAdvancedChat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Conversation History Messages
         * @description Returns chat history in a scrolling load format, with the first page returning the latest `limit` messages, i.e., in reverse order.
         */
        get: operations["getConversationMessagesByAppAdvancedChat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Conversation List
         * @description Get the current user's conversation list, by default returns the most recent 20.
         */
        get: operations["getConversationsByAppAdvancedChat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/{conversation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Conversation
         * @description Delete a conversation.
         */
        delete: operations["deleteConversationByAppAdvancedChat"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/{conversation_id}/name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rename Conversation
         * @description Rename a conversation, the conversation name is used for display on clients that support multiple conversations.
         */
        post: operations["renameConversationByAppAdvancedChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/meta": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get App Meta Information
         * @description Used to get tool icons
         */
        get: operations["getAppMetaInfoByAppAdvancedChat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/annotations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Annotation List
         * @description Get the list of annotations for the application
         */
        get: operations["getAnnotationsListByAppAdvancedChat"];
        put?: never;
        /**
         * Create Annotation
         * @description Create a new annotation
         */
        post: operations["createAnnotationByAppAdvancedChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/annotations/{annotation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Annotation
         * @description Update a specific annotation
         */
        put: operations["updateAnnotationByAppAdvancedChat"];
        post?: never;
        /**
         * Delete Annotation
         * @description Delete a specific annotation
         */
        delete: operations["deleteAnnotationByAppAdvancedChat"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/annotation-reply/{action}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Initialize Annotation Reply Settings
         * @description Enable or disable annotation reply functionality
         */
        post: operations["configureAnnotationReplyByAppAdvancedChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/annotation-reply/{action}/status/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Annotation Reply Settings Status
         * @description Query the status of annotation reply initialization task
         */
        get: operations["getAnnotationReplyStatusByAppAdvancedChat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @description Error code */
            code: string;
            /** @description HTTP status code */
            status: number;
            /** @description Error message description */
            message: string;
        };
        Usage: {
            /** @description Number of tokens used for prompts */
            prompt_tokens?: number;
            /** @description Number of tokens used for completion */
            completion_tokens?: number;
            /** @description Total number of tokens used */
            total_tokens?: number;
            /** @description Unit price for prompts */
            prompt_unit_price?: string;
            /** @description Price unit for prompts */
            prompt_price_unit?: string;
            /** @description Total price for prompts */
            prompt_price?: string;
            /** @description Unit price for completion */
            completion_unit_price?: string;
            /** @description Price unit for completion */
            completion_price_unit?: string;
            /** @description Total price for completion */
            completion_price?: string;
            /** @description Total price */
            total_price?: string;
            /** @description Currency unit */
            currency?: string;
            /** @description Latency time */
            latency?: number;
        };
        RetrieverResource: {
            /** @description Position */
            position?: number;
            /** @description Dataset ID */
            dataset_id?: string;
            /** @description Dataset name */
            dataset_name?: string;
            /** @description Document ID */
            document_id?: string;
            /** @description Document name */
            document_name?: string;
            /** @description Segment ID */
            segment_id?: string;
            /** @description Relevance score */
            score?: number;
            /** @description Content */
            content?: string;
        };
        ChatCompletionResponse: {
            /**
             * @description Event type, fixed as message
             * @enum {string}
             */
            event?: "message";
            /** @description Task ID for request tracking and stopping responses */
            task_id?: string;
            /** @description Unique ID */
            id?: string;
            /** @description Unique message ID */
            message_id?: string;
            /** @description Conversation ID */
            conversation_id?: string;
            /**
             * @description App mode, fixed as chat
             * @enum {string}
             */
            mode?: "chat";
            /** @description Complete response content */
            answer?: string;
            /** @description Metadata */
            metadata?: {
                usage?: components["schemas"]["Usage"];
                retriever_resources?: components["schemas"]["RetrieverResource"][];
            };
            /** @description Message creation timestamp */
            created_at?: number;
        };
        ChunkChatCompletionResponse: {
            /**
             * @description Event type
             * @enum {string}
             */
            event?: "message" | "message_file" | "message_end" | "tts_message" | "tts_message_end" | "message_replace" | "workflow_started" | "node_started" | "node_finished" | "workflow_finished" | "error" | "ping";
            /** @description Task ID for request tracking and stopping responses */
            task_id?: string;
            /** @description Unique message ID */
            message_id?: string;
            /** @description Conversation ID */
            conversation_id?: string;
            /** @description Workflow execution ID */
            workflow_run_id?: string;
            /** @description LLM text chunk content (for message event) or replacement content (for message_replace event) */
            answer?: string;
            /** @description Voice synthesis audio data (base64 encoded, for tts_message event) */
            audio?: string;
            /** @description Unique file ID (for message_file event) */
            id?: string;
            /** @description File type, currently only 'image' (for message_file event) */
            type?: string;
            /** @description File ownership, 'user' or 'assistant' (for message_file event) */
            belongs_to?: string;
            /** @description File access URL (for message_file event) */
            url?: string;
            /** @description Metadata (for message_end event) */
            metadata?: {
                usage?: components["schemas"]["Usage"];
                retriever_resources?: components["schemas"]["RetrieverResource"][];
            };
            /** @description Detailed content (for workflow_started, node_started, node_finished, workflow_finished events) */
            data?: Record<string, never>;
            /** @description HTTP status code (for error event) or execution status (data.status in node_finished, workflow_finished events) */
            status?: number;
            /** @description Error code (for error event) */
            code?: string;
            /** @description Error message (for error event) */
            message?: string;
            /** @description Creation timestamp */
            created_at?: number;
        };
        UploadedFile: {
            /** @description File ID */
            id?: string;
            /** @description File name */
            name?: string;
            /** @description File size (bytes) */
            size?: number;
            /** @description File extension */
            extension?: string;
            /** @description File mime-type */
            mime_type?: string;
            /** @description Uploader ID */
            created_by?: string;
            /** @description Upload time */
            created_at?: number;
        };
        FileInput: {
            /**
             * @description File type:
             *     - `document` Specific types include: 'TXT', 'MD', 'MARKDOWN', 'PDF', 'HTML', 'XLSX', 'XLS', 'DOCX', 'CSV', 'EML', 'MSG', 'PPTX', 'PPT', 'XML', 'EPUB'
             *     - `image` Specific types include: 'JPG', 'JPEG', 'PNG', 'GIF', 'WEBP', 'SVG'
             *     - `audio` Specific types include: 'MP3', 'M4A', 'WAV', 'WEBM', 'AMR'
             *     - `video` Specific types include: 'MP4', 'MOV', 'MPEG', 'MPGA'
             *     - `custom` Specific types include: other file types
             *
             * @enum {string}
             */
            type?: "document" | "image" | "audio" | "video" | "custom";
            /**
             * @description Transfer method:
             *     - `remote_url`: Image URL.
             *     - `local_file`: Upload file.
             *
             * @enum {string}
             */
            transfer_method?: "remote_url" | "local_file";
            /** @description Image URL. (Only when transfer method is `remote_url`). */
            url?: string;
            /** @description Upload file ID. (Only when transfer method is `local_file`). */
            upload_file_id?: string;
        };
    };
    responses: {
        /** @description Request error */
        Error400: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Non authorized or authentication failed */
        Error401: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        Error404: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Server error */
        Error500: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    sendChatMessageByAppAdvancedChat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description User input/question content */
                    query: string;
                    /** @description Allows passing values for variables defined by the App. The inputs parameter contains multiple key/value pairs, where each key corresponds to a specific variable and each value is the value for that variable. Variables can be file list type. If the variable is a file list type, the corresponding value should be in list format, with each element containing the following: type, transfer_method, etc. */
                    inputs?: Record<string, never>;
                    /**
                     * @description Response mode:
                     *     - streaming: Streaming mode (recommended), implements typewriter-like output based on SSE
                     *     - blocking: Blocking mode, returns result after execution is complete
                     *
                     * @enum {string}
                     */
                    response_mode?: "streaming" | "blocking";
                    /** @description User identifier */
                    user?: string;
                    /** @description Conversation ID */
                    conversation_id?: string;
                    /** @description File list, suitable for combining files with text understanding to answer questions, only available when the model supports Vision capabilities. */
                    files?: components["schemas"]["FileInput"][];
                    /**
                     * @description (Optional) Automatically generate title, default `true`. If set to `false`, you can call the conversation rename interface and set `auto_generate` to `true` to generate a title asynchronously.
                     * @default true
                     */
                    auto_generate_name?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatCompletionResponse"];
                    "text/event-stream": components["schemas"]["ChunkChatCompletionResponse"];
                };
            };
            400: components["responses"]["Error400"];
            404: components["responses"]["Error404"];
            500: components["responses"]["Error500"];
        };
    };
    stopChatResponseByAppAdvancedChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Task ID, can be obtained from the streaming response chunks */
                task_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description User identifier, must be consistent with the user passed in the message sending interface */
                    user: string;
                };
            };
        };
        responses: {
            /** @description Successfully stopped the response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Fixed return value 'success'
                         * @enum {string}
                         */
                        result?: "success";
                    };
                };
            };
        };
    };
    uploadFileByAppAdvancedChat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description File to upload
                     */
                    file: string;
                    /** @description User identifier */
                    user?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadedFile"];
                };
            };
            400: components["responses"]["Error400"];
            /** @description File too large */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unsupported file type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Storage service error */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    convertAudioToTextByAppAdvancedChat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description Audio file
                     */
                    file?: string;
                    /**
                     * @description User identifier
                     * @example user123
                     */
                    user?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Converted text */
                        text?: string;
                    };
                };
            };
        };
    };
    convertTextToAudioByAppAdvancedChat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Message ID */
                    message_id?: string;
                    /** @description Text to convert */
                    text?: string;
                    /** @description User identifier */
                    user?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "audio/mpeg": string;
                };
            };
        };
    };
    getApplicationInfoByAppAdvancedChat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Application name */
                        name?: string;
                        /** @description Application description */
                        description?: string;
                        /** @description Application tags */
                        tags?: string[];
                    };
                };
            };
        };
    };
    getApplicationParametersByAppAdvancedChat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Opening statement */
                        opening_statement?: string;
                        /** @description List of suggested opening questions */
                        suggested_questions?: string[];
                        /** @description Settings for suggested questions after answer */
                        suggested_questions_after_answer?: {
                            enabled?: boolean;
                        };
                        /** @description Audio to text settings */
                        speech_to_text?: {
                            enabled?: boolean;
                        };
                        /** @description Citation and attribution settings */
                        retriever_resource?: {
                            enabled?: boolean;
                        };
                        /** @description Annotation reply settings */
                        annotation_reply?: {
                            /** @description Whether annotation reply is enabled */
                            enabled?: boolean;
                            /** @description Similarity score threshold */
                            score_threshold?: number;
                            /** @description Embedding model */
                            embedding_model?: string;
                            /** @description Embedding model provider */
                            embedding_model_provider?: string;
                        };
                        /** @description User input form configuration */
                        user_input_form?: Record<string, never>[];
                        /** @description File upload configuration */
                        file_upload?: Record<string, never>;
                        /** @description System parameters */
                        system_parameters?: Record<string, never>;
                    };
                };
            };
        };
    };
    sendMessageFeedbackByAppAdvancedChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Message ID */
                message_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Like, dislike, or null to remove feedback
                     * @enum {string}
                     */
                    rating: "like" | "dislike" | null;
                    /** @description User identifier, defined by the developer, must be unique within the application. */
                    user: string;
                    /** @description Specific feedback information. */
                    content?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Fixed return value 'success'
                         * @enum {string}
                         */
                        result?: "success";
                    };
                };
            };
        };
    };
    getSuggestedQuestionsByAppAdvancedChat: {
        parameters: {
            query: {
                /** @description User identifier, defined by the developer, must be unique within the application. */
                user: string;
            };
            header?: never;
            path: {
                /** @description Message ID */
                message_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Fixed return value 'success'
                         * @enum {string}
                         */
                        result?: "success";
                        /** @description List of suggested questions */
                        data?: string[];
                    };
                };
            };
        };
    };
    getConversationMessagesByAppAdvancedChat: {
        parameters: {
            query: {
                /** @description Conversation ID */
                conversation_id: string;
                /** @description User identifier, defined by the developer, must be unique within the application. */
                user: string;
                /** @description ID of the first chat message on the current page, default null */
                first_id?: string;
                /** @description Number of chat messages to return per request, default 20. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Message list */
                        data?: {
                            /** @description Message ID */
                            id?: string;
                            /** @description Conversation ID */
                            conversation_id?: string;
                            /** @description User input parameters. */
                            inputs?: Record<string, never>;
                            /** @description User input / question content. */
                            query?: string;
                            /** @description Message files */
                            message_files?: {
                                /** @description ID */
                                id?: string;
                                /** @description File type, image for images */
                                type?: string;
                                /** @description Preview image URL */
                                url?: string;
                                /**
                                 * @description File owner, user or assistant
                                 * @enum {string}
                                 */
                                belongs_to?: "user" | "assistant";
                            }[];
                            /** @description Response message content */
                            answer?: string;
                            /** @description Creation time */
                            created_at?: number;
                            /** @description Feedback information */
                            feedback?: {
                                /**
                                 * @description Like or dislike
                                 * @enum {string}
                                 */
                                rating?: "like" | "dislike";
                            };
                            /** @description List of referenced and attributed segments */
                            retriever_resources?: components["schemas"]["RetrieverResource"][];
                        }[];
                        /** @description Whether there is a next page */
                        has_more?: boolean;
                        /** @description Number of returned items, if input exceeds system limit, returns system limit quantity */
                        limit?: number;
                    };
                };
            };
        };
    };
    getConversationsByAppAdvancedChat: {
        parameters: {
            query: {
                /** @description User identifier, defined by the developer, must be unique within the application. */
                user: string;
                /** @description (Optional) ID of the last record on the current page, default null */
                last_id?: string;
                /** @description (Optional) Number of records to return per request, default 20, maximum 100, minimum 1. */
                limit?: number;
                /** @description (Optional) Sort field, default -updated_at (sorted by update time in descending order)
                 *     - Available values: created_at, -created_at, updated_at, -updated_at
                 *     - The symbol in front of the field represents ascending or descending order, - means descending
                 *      */
                sort_by?: "created_at" | "-created_at" | "updated_at" | "-updated_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Conversation list */
                        data?: {
                            /** @description Conversation ID */
                            id?: string;
                            /** @description Conversation name, by default generated by the large language model. */
                            name?: string;
                            /** @description User input parameters. */
                            inputs?: Record<string, never>;
                            /** @description Conversation status */
                            status?: string;
                            /** @description Opening statement */
                            introduction?: string;
                            /** @description Creation time */
                            created_at?: number;
                            /** @description Update time */
                            updated_at?: number;
                        }[];
                        /** @description Whether there is more data */
                        has_more?: boolean;
                        /** @description Number of returned items, if input exceeds system limit, returns system limit quantity */
                        limit?: number;
                    };
                };
            };
        };
    };
    deleteConversationByAppAdvancedChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Conversation ID */
                conversation_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description User identifier, defined by the developer, must be unique within the application. */
                    user: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Fixed return value 'success'
                         * @enum {string}
                         */
                        result?: "success";
                    };
                };
            };
        };
    };
    renameConversationByAppAdvancedChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Conversation ID */
                conversation_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description (Optional) Name, if `auto_generate` is `true`, this parameter can be omitted. */
                    name?: string;
                    /**
                     * @description (Optional) Automatically generate title, default false.
                     * @default false
                     */
                    auto_generate?: boolean;
                    /** @description User identifier, defined by the developer, must be unique within the application. */
                    user: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Conversation ID */
                        id?: string;
                        /** @description Conversation name */
                        name?: string;
                        /** @description User input parameters */
                        inputs?: Record<string, never>;
                        /** @description Conversation status */
                        status?: string;
                        /** @description Opening statement */
                        introduction?: string;
                        /** @description Creation time */
                        created_at?: number;
                        /** @description Update time */
                        updated_at?: number;
                    };
                };
            };
        };
    };
    getAppMetaInfoByAppAdvancedChat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Tool icons */
                        tool_icons?: {
                            [key: string]: {
                                /** @description Background color in hex format */
                                background?: string;
                                /** @description Emoji */
                                content?: string;
                            } | string;
                        };
                    };
                };
            };
        };
    };
    getAnnotationsListByAppAdvancedChat: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Items per page */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved annotation list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @description Annotation ID */
                            id?: string;
                            /** @description Question */
                            question?: string;
                            /** @description Answer */
                            answer?: string;
                            /** @description Hit count */
                            hit_count?: number;
                            /** @description Creation timestamp */
                            created_at?: number;
                        }[];
                        /** @description Whether there is more data */
                        has_more?: boolean;
                        /** @description Items per page */
                        limit?: number;
                        /** @description Total record count */
                        total?: number;
                        /** @description Current page number */
                        page?: number;
                    };
                };
            };
        };
    };
    createAnnotationByAppAdvancedChat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Question */
                    question: string;
                    /** @description Answer */
                    answer: string;
                };
            };
        };
        responses: {
            /** @description Successfully created annotation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Annotation ID */
                        id?: string;
                        /** @description Question */
                        question?: string;
                        /** @description Answer */
                        answer?: string;
                        /** @description Hit count */
                        hit_count?: number;
                        /** @description Creation timestamp */
                        created_at?: number;
                    };
                };
            };
        };
    };
    updateAnnotationByAppAdvancedChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Annotation ID */
                annotation_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Question */
                    question: string;
                    /** @description Answer */
                    answer: string;
                };
            };
        };
        responses: {
            /** @description Successfully updated annotation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Annotation ID */
                        id?: string;
                        /** @description Question */
                        question?: string;
                        /** @description Answer */
                        answer?: string;
                        /** @description Hit count */
                        hit_count?: number;
                        /** @description Creation timestamp */
                        created_at?: number;
                    };
                };
            };
        };
    };
    deleteAnnotationByAppAdvancedChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Annotation ID */
                annotation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted annotation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        result?: "success";
                    };
                };
            };
        };
    };
    configureAnnotationReplyByAppAdvancedChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Action, can only be 'enable' or 'disable' */
                action: "enable" | "disable";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Specified embedding model provider, must be configured in the system first, corresponds to the provider field */
                    embedding_model_provider?: string;
                    embedding_provider_name?: string;
                    /** @description Specified embedding model, corresponds to the model field */
                    embedding_model?: string;
                    embedding_model_name?: string;
                    /** @description Similarity score threshold, when similarity is greater than this threshold, the system will automatically reply, otherwise it will not reply */
                    score_threshold?: number;
                };
            };
        };
        responses: {
            /** @description Successfully enabled or disabled annotation reply */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Job ID */
                        job_id?: string;
                        /** @description Job status */
                        job_status?: string;
                    };
                };
            };
        };
    };
    getAnnotationReplyStatusByAppAdvancedChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Action, can only be 'enable' or 'disable', and must be consistent with the action in the annotation reply initialization interface */
                action: "enable" | "disable";
                /** @description Job ID, returned from the annotation reply initialization interface */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved job status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Job ID */
                        job_id?: string;
                        /** @description Job status */
                        job_status?: string;
                        /** @description Error message */
                        error_msg?: string;
                    };
                };
            };
        };
    };
}
