# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .retrieval_model_search_method import RetrievalModelSearchMethod
import pydantic
from .retrieval_model_reranking_model import RetrievalModelRerankingModel
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class RetrievalModel(UniversalBaseModel):
    search_method: typing.Optional[RetrievalModelSearchMethod] = pydantic.Field(default=None)
    """
    Search method:
    - keyword_search: Keyword search
    - semantic_search: Semantic search
    - full_text_search: Full text search
    - hybrid_search: Hybrid search
    """

    reranking_enable: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to enable Reranking, optional, required if retrieval mode is semantic_search or hybrid_search
    """

    reranking_model: typing.Optional[RetrievalModelRerankingModel] = pydantic.Field(default=None)
    """
    Rerank model configuration, optional, required if reranking is enabled
    """

    weights: typing.Optional[float] = pydantic.Field(default=None)
    """
    Weight setting for semantic search in hybrid search mode
    """

    top_k: typing.Optional[int] = pydantic.Field(default=None)
    """
    Number of results returned, optional
    """

    score_threshold_enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to enable score threshold
    """

    score_threshold: typing.Optional[float] = pydantic.Field(default=None)
    """
    Score threshold
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
