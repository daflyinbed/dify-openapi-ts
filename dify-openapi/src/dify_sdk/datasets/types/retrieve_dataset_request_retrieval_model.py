# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from .retrieve_dataset_request_retrieval_model_search_method import (
    RetrieveDatasetRequestRetrievalModelSearchMethod,
)
import pydantic
from .retrieve_dataset_request_retrieval_model_reranking_model import (
    RetrieveDatasetRequestRetrievalModelRerankingModel,
)
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class RetrieveDatasetRequestRetrievalModel(UniversalBaseModel):
    """
    Retrieval parameter configuration
    """

    search_method: typing.Optional[RetrieveDatasetRequestRetrievalModelSearchMethod] = pydantic.Field(default=None)
    """
    Search method
    """

    reranking_enable: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to enable Reranking
    """

    reranking_model: typing.Optional[RetrieveDatasetRequestRetrievalModelRerankingModel] = None
    weights: typing.Optional[float] = pydantic.Field(default=None)
    """
    Weight setting for semantic search in hybrid search mode
    """

    top_k: typing.Optional[int] = pydantic.Field(default=None)
    """
    Number of results to return
    """

    score_threshold_enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to enable score threshold
    """

    score_threshold: typing.Optional[float] = pydantic.Field(default=None)
    """
    Score threshold
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
