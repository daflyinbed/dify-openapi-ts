# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .document_display_status import DocumentDisplayStatus
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Document(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Document ID
    """

    dataset_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Associated knowledge base ID
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Document name
    """

    data_source_type: typing.Optional[str] = pydantic.Field(default=None)
    """
    Data source type
    """

    display_status: typing.Optional[DocumentDisplayStatus] = pydantic.Field(default=None)
    """
    Display status
    """

    enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether enabled
    """

    word_count: typing.Optional[int] = pydantic.Field(default=None)
    """
    Word count
    """

    segment_count: typing.Optional[int] = pydantic.Field(default=None)
    """
    Number of segments
    """

    created_from: typing.Optional[str] = pydantic.Field(default=None)
    """
    Created from
    """

    created_by: typing.Optional[str] = pydantic.Field(default=None)
    """
    Creator ID
    """

    created_at: typing.Optional[float] = pydantic.Field(default=None)
    """
    Creation timestamp
    """

    updated_at: typing.Optional[float] = pydantic.Field(default=None)
    """
    Last updated timestamp
    """

    archived: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether archived
    """

    batch: typing.Optional[str] = pydantic.Field(default=None)
    """
    Batch number
    """

    hit_count: typing.Optional[int] = pydantic.Field(default=None)
    """
    Hit count
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
