# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .types.send_completion_message_by_app_generation_request_inputs import (
    SendCompletionMessageByAppGenerationRequestInputs,
)
from .types.send_completion_message_by_app_generation_request_response_mode import (
    SendCompletionMessageByAppGenerationRequestResponseMode,
)
from ..types.file_input import FileInput
from ..core.request_options import RequestOptions
from ..types.completion_message import CompletionMessage
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from ..types.error import Error
from ..errors.not_found_error import NotFoundError
from ..errors.internal_server_error import InternalServerError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .. import core
from ..types.uploaded_file import UploadedFile
from ..errors.content_too_large_error import ContentTooLargeError
from ..errors.unsupported_media_type_error import UnsupportedMediaTypeError
from ..errors.service_unavailable_error import ServiceUnavailableError
from .types.get_application_info_by_app_generation_response import (
    GetApplicationInfoByAppGenerationResponse,
)
from .types.get_application_parameters_by_app_generation_response import (
    GetApplicationParametersByAppGenerationResponse,
)
from .types.stop_completion_response_by_app_generation_response import (
    StopCompletionResponseByAppGenerationResponse,
)
from ..core.jsonable_encoder import jsonable_encoder
from .types.send_message_feedback_by_app_generation_response import (
    SendMessageFeedbackByAppGenerationResponse,
)
from .types.get_annotations_list_by_app_generation_response import (
    GetAnnotationsListByAppGenerationResponse,
)
from .types.create_annotation_by_app_generation_response import (
    CreateAnnotationByAppGenerationResponse,
)
from .types.update_annotation_by_app_generation_response import (
    UpdateAnnotationByAppGenerationResponse,
)
from .types.delete_annotation_by_app_generation_response import (
    DeleteAnnotationByAppGenerationResponse,
)
from .types.configure_annotation_reply_by_app_generation_request_action import (
    ConfigureAnnotationReplyByAppGenerationRequestAction,
)
from .types.configure_annotation_reply_by_app_generation_response import (
    ConfigureAnnotationReplyByAppGenerationResponse,
)
from .types.get_annotation_reply_status_by_app_generation_request_action import (
    GetAnnotationReplyStatusByAppGenerationRequestAction,
)
from .types.get_annotation_reply_status_by_app_generation_response import (
    GetAnnotationReplyStatusByAppGenerationResponse,
)
from .types.get_app_meta_info_by_app_generation_response import (
    GetAppMetaInfoByAppGenerationResponse,
)
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class GenerationClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def send_completion_message_by_app_generation(
        self,
        *,
        inputs: SendCompletionMessageByAppGenerationRequestInputs,
        response_mode: typing.Optional[SendCompletionMessageByAppGenerationRequestResponseMode] = OMIT,
        user: typing.Optional[str] = OMIT,
        files: typing.Optional[typing.Sequence[FileInput]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CompletionMessage:
        """
        Send request to text generation application

        Parameters
        ----------
        inputs : SendCompletionMessageByAppGenerationRequestInputs

        response_mode : typing.Optional[SendCompletionMessageByAppGenerationRequestResponseMode]
            Response mode:
            - streaming: Streaming mode (recommended), implements typewriter-like output based on SSE
            - blocking: Blocking mode, returns result after execution is complete

        user : typing.Optional[str]
            User identifier

        files : typing.Optional[typing.Sequence[FileInput]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompletionMessage
            Successful response

        Examples
        --------
        from dify import DifyApi
        from dify.generation import SendCompletionMessageByAppGenerationRequestInputs

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.generation.send_completion_message_by_app_generation(
            inputs=SendCompletionMessageByAppGenerationRequestInputs(
                query="query",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "completion-messages",
            method="POST",
            json={
                "inputs": convert_and_respect_annotation_metadata(
                    object_=inputs,
                    annotation=SendCompletionMessageByAppGenerationRequestInputs,
                    direction="write",
                ),
                "response_mode": response_mode,
                "user": user,
                "files": convert_and_respect_annotation_metadata(
                    object_=files,
                    annotation=typing.Sequence[FileInput],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CompletionMessage,
                    parse_obj_as(
                        type_=CompletionMessage,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def upload_file_by_app_generation(
        self,
        *,
        file: core.File,
        user: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UploadedFile:
        """
        Upload files for use when sending messages.
        Supported file types depend on application type and configuration.
        Uploaded files are only available to the current end user.

        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        user : typing.Optional[str]
            User identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UploadedFile
            Successful response

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.generation.upload_file_by_app_generation()
        """
        _response = self._client_wrapper.httpx_client.request(
            "files/upload",
            method="POST",
            data={
                "user": user,
            },
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UploadedFile,
                    parse_obj_as(
                        type_=UploadedFile,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 413:
                raise ContentTooLargeError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 415:
                raise UnsupportedMediaTypeError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_application_info_by_app_generation(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApplicationInfoByAppGenerationResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApplicationInfoByAppGenerationResponse
            Successful response

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.generation.get_application_info_by_app_generation()
        """
        _response = self._client_wrapper.httpx_client.request(
            "info",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetApplicationInfoByAppGenerationResponse,
                    parse_obj_as(
                        type_=GetApplicationInfoByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_application_parameters_by_app_generation(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApplicationParametersByAppGenerationResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApplicationParametersByAppGenerationResponse
            Successful response

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.generation.get_application_parameters_by_app_generation()
        """
        _response = self._client_wrapper.httpx_client.request(
            "parameters",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetApplicationParametersByAppGenerationResponse,
                    parse_obj_as(
                        type_=GetApplicationParametersByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def stop_completion_response_by_app_generation(
        self,
        task_id: str,
        *,
        user: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StopCompletionResponseByAppGenerationResponse:
        """
        Only supports streaming mode

        Parameters
        ----------
        task_id : str
            Task ID, can be obtained from the streaming response chunks

        user : str
            User identifier, must be consistent with the user passed in the message sending interface

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StopCompletionResponseByAppGenerationResponse
            Successfully stopped the response

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.generation.stop_completion_response_by_app_generation(
            task_id="task_id",
            user="user",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"completion-messages/{jsonable_encoder(task_id)}/stop",
            method="POST",
            json={
                "user": user,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    StopCompletionResponseByAppGenerationResponse,
                    parse_obj_as(
                        type_=StopCompletionResponseByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def send_message_feedback_by_app_generation(
        self,
        message_id: str,
        *,
        rating: str,
        user: str,
        content: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SendMessageFeedbackByAppGenerationResponse:
        """
        End user feedback for messages, helps application developers optimize output expectations

        Parameters
        ----------
        message_id : str
            Message ID

        rating : str
            Like (like), dislike (dislike), or cancel rating (null)

        user : str
            User identifier, defined by developer rules, must be unique within the application

        content : typing.Optional[str]
            Specific feedback information

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendMessageFeedbackByAppGenerationResponse
            Successful response

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.generation.send_message_feedback_by_app_generation(
            message_id="message_id",
            rating="rating",
            user="user",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"messages/{jsonable_encoder(message_id)}/feedbacks",
            method="POST",
            json={
                "rating": rating,
                "user": user,
                "content": content,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SendMessageFeedbackByAppGenerationResponse,
                    parse_obj_as(
                        type_=SendMessageFeedbackByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def convert_text_to_audio_by_app_generation(
        self,
        *,
        message_id: typing.Optional[str] = OMIT,
        text: typing.Optional[str] = OMIT,
        user: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Iterator[bytes]:
        """
        Convert text to speech

        Parameters
        ----------
        message_id : typing.Optional[str]
            Dify generated text message ID. The backend will find the corresponding content directly through the message_id to synthesize speech. If both message_id and text are provided, message_id takes precedence

        text : typing.Optional[str]
            Text content for speech generation. If message_id is not provided, this field will be used

        user : typing.Optional[str]
            User identifier, defined by developer rules, must be unique within the application

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Yields
        ------
        typing.Iterator[bytes]
            Successful response
        """
        with self._client_wrapper.httpx_client.stream(
            "text-to-audio",
            method="POST",
            json={
                "message_id": message_id,
                "text": text,
                "user": user,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        ) as _response:
            try:
                if 200 <= _response.status_code < 300:
                    _chunk_size = request_options.get("chunk_size", None) if request_options is not None else None
                    for _chunk in _response.iter_bytes(chunk_size=_chunk_size):
                        yield _chunk
                    return
                _response.read()
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_annotations_list_by_app_generation(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAnnotationsListByAppGenerationResponse:
        """
        Get the list of annotations for the application

        Parameters
        ----------
        page : typing.Optional[int]
            Page number

        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAnnotationsListByAppGenerationResponse
            Successfully retrieved annotation list

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.generation.get_annotations_list_by_app_generation()
        """
        _response = self._client_wrapper.httpx_client.request(
            "apps/annotations",
            method="GET",
            params={
                "page": page,
                "limit": limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetAnnotationsListByAppGenerationResponse,
                    parse_obj_as(
                        type_=GetAnnotationsListByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_annotation_by_app_generation(
        self,
        *,
        question: str,
        answer: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateAnnotationByAppGenerationResponse:
        """
        Create a new annotation

        Parameters
        ----------
        question : str
            Question

        answer : str
            Answer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateAnnotationByAppGenerationResponse
            Successfully created annotation

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.generation.create_annotation_by_app_generation(
            question="question",
            answer="answer",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "apps/annotations",
            method="POST",
            json={
                "question": question,
                "answer": answer,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateAnnotationByAppGenerationResponse,
                    parse_obj_as(
                        type_=CreateAnnotationByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_annotation_by_app_generation(
        self,
        annotation_id: str,
        *,
        question: str,
        answer: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateAnnotationByAppGenerationResponse:
        """
        Update a specific annotation

        Parameters
        ----------
        annotation_id : str
            Annotation ID

        question : str
            Question

        answer : str
            Answer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateAnnotationByAppGenerationResponse
            Successfully updated annotation

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.generation.update_annotation_by_app_generation(
            annotation_id="annotation_id",
            question="question",
            answer="answer",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"apps/annotations/{jsonable_encoder(annotation_id)}",
            method="PUT",
            json={
                "question": question,
                "answer": answer,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateAnnotationByAppGenerationResponse,
                    parse_obj_as(
                        type_=UpdateAnnotationByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_annotation_by_app_generation(
        self,
        annotation_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteAnnotationByAppGenerationResponse:
        """
        Delete a specific annotation

        Parameters
        ----------
        annotation_id : str
            Annotation ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteAnnotationByAppGenerationResponse
            Successfully deleted annotation

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.generation.delete_annotation_by_app_generation(
            annotation_id="annotation_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"apps/annotations/{jsonable_encoder(annotation_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeleteAnnotationByAppGenerationResponse,
                    parse_obj_as(
                        type_=DeleteAnnotationByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def configure_annotation_reply_by_app_generation(
        self,
        action: ConfigureAnnotationReplyByAppGenerationRequestAction,
        *,
        embedding_model_provider: typing.Optional[str] = OMIT,
        embedding_model: typing.Optional[str] = OMIT,
        score_threshold: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConfigureAnnotationReplyByAppGenerationResponse:
        """
        Enable or disable annotation reply functionality

        Parameters
        ----------
        action : ConfigureAnnotationReplyByAppGenerationRequestAction
            Action, can only be 'enable' or 'disable'

        embedding_model_provider : typing.Optional[str]
            Specified embedding model provider, must be configured in the system first, corresponds to the provider field

        embedding_model : typing.Optional[str]
            Specified embedding model, corresponds to the model field

        score_threshold : typing.Optional[float]
            Similarity score threshold, when similarity is greater than this threshold, the system will automatically reply, otherwise it will not reply

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConfigureAnnotationReplyByAppGenerationResponse
            Successfully enabled or disabled annotation reply

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.generation.configure_annotation_reply_by_app_generation(
            action="enable",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"apps/annotation-reply/{jsonable_encoder(action)}",
            method="POST",
            json={
                "embedding_model_provider": embedding_model_provider,
                "embedding_model": embedding_model,
                "score_threshold": score_threshold,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ConfigureAnnotationReplyByAppGenerationResponse,
                    parse_obj_as(
                        type_=ConfigureAnnotationReplyByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_annotation_reply_status_by_app_generation(
        self,
        action: GetAnnotationReplyStatusByAppGenerationRequestAction,
        job_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAnnotationReplyStatusByAppGenerationResponse:
        """
        Query the status of annotation reply initialization task

        Parameters
        ----------
        action : GetAnnotationReplyStatusByAppGenerationRequestAction
            Action, can only be 'enable' or 'disable', and must be consistent with the action in the annotation reply initialization interface

        job_id : str
            Job ID, returned from the annotation reply initialization interface

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAnnotationReplyStatusByAppGenerationResponse
            Successfully retrieved job status

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.generation.get_annotation_reply_status_by_app_generation(
            action="enable",
            job_id="job_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"apps/annotation-reply/{jsonable_encoder(action)}/status/{jsonable_encoder(job_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetAnnotationReplyStatusByAppGenerationResponse,
                    parse_obj_as(
                        type_=GetAnnotationReplyStatusByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_app_meta_info_by_app_generation(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAppMetaInfoByAppGenerationResponse:
        """
        Used to get tool icons

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAppMetaInfoByAppGenerationResponse
            Successful response

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.generation.get_app_meta_info_by_app_generation()
        """
        _response = self._client_wrapper.httpx_client.request(
            "meta",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetAppMetaInfoByAppGenerationResponse,
                    parse_obj_as(
                        type_=GetAppMetaInfoByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncGenerationClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def send_completion_message_by_app_generation(
        self,
        *,
        inputs: SendCompletionMessageByAppGenerationRequestInputs,
        response_mode: typing.Optional[SendCompletionMessageByAppGenerationRequestResponseMode] = OMIT,
        user: typing.Optional[str] = OMIT,
        files: typing.Optional[typing.Sequence[FileInput]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CompletionMessage:
        """
        Send request to text generation application

        Parameters
        ----------
        inputs : SendCompletionMessageByAppGenerationRequestInputs

        response_mode : typing.Optional[SendCompletionMessageByAppGenerationRequestResponseMode]
            Response mode:
            - streaming: Streaming mode (recommended), implements typewriter-like output based on SSE
            - blocking: Blocking mode, returns result after execution is complete

        user : typing.Optional[str]
            User identifier

        files : typing.Optional[typing.Sequence[FileInput]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CompletionMessage
            Successful response

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi
        from dify.generation import SendCompletionMessageByAppGenerationRequestInputs

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generation.send_completion_message_by_app_generation(
                inputs=SendCompletionMessageByAppGenerationRequestInputs(
                    query="query",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "completion-messages",
            method="POST",
            json={
                "inputs": convert_and_respect_annotation_metadata(
                    object_=inputs,
                    annotation=SendCompletionMessageByAppGenerationRequestInputs,
                    direction="write",
                ),
                "response_mode": response_mode,
                "user": user,
                "files": convert_and_respect_annotation_metadata(
                    object_=files,
                    annotation=typing.Sequence[FileInput],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CompletionMessage,
                    parse_obj_as(
                        type_=CompletionMessage,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def upload_file_by_app_generation(
        self,
        *,
        file: core.File,
        user: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UploadedFile:
        """
        Upload files for use when sending messages.
        Supported file types depend on application type and configuration.
        Uploaded files are only available to the current end user.

        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        user : typing.Optional[str]
            User identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UploadedFile
            Successful response

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generation.upload_file_by_app_generation()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "files/upload",
            method="POST",
            data={
                "user": user,
            },
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UploadedFile,
                    parse_obj_as(
                        type_=UploadedFile,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 413:
                raise ContentTooLargeError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 415:
                raise UnsupportedMediaTypeError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 503:
                raise ServiceUnavailableError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_application_info_by_app_generation(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApplicationInfoByAppGenerationResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApplicationInfoByAppGenerationResponse
            Successful response

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generation.get_application_info_by_app_generation()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "info",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetApplicationInfoByAppGenerationResponse,
                    parse_obj_as(
                        type_=GetApplicationInfoByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_application_parameters_by_app_generation(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetApplicationParametersByAppGenerationResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetApplicationParametersByAppGenerationResponse
            Successful response

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generation.get_application_parameters_by_app_generation()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "parameters",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetApplicationParametersByAppGenerationResponse,
                    parse_obj_as(
                        type_=GetApplicationParametersByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def stop_completion_response_by_app_generation(
        self,
        task_id: str,
        *,
        user: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StopCompletionResponseByAppGenerationResponse:
        """
        Only supports streaming mode

        Parameters
        ----------
        task_id : str
            Task ID, can be obtained from the streaming response chunks

        user : str
            User identifier, must be consistent with the user passed in the message sending interface

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StopCompletionResponseByAppGenerationResponse
            Successfully stopped the response

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generation.stop_completion_response_by_app_generation(
                task_id="task_id",
                user="user",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"completion-messages/{jsonable_encoder(task_id)}/stop",
            method="POST",
            json={
                "user": user,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    StopCompletionResponseByAppGenerationResponse,
                    parse_obj_as(
                        type_=StopCompletionResponseByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def send_message_feedback_by_app_generation(
        self,
        message_id: str,
        *,
        rating: str,
        user: str,
        content: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SendMessageFeedbackByAppGenerationResponse:
        """
        End user feedback for messages, helps application developers optimize output expectations

        Parameters
        ----------
        message_id : str
            Message ID

        rating : str
            Like (like), dislike (dislike), or cancel rating (null)

        user : str
            User identifier, defined by developer rules, must be unique within the application

        content : typing.Optional[str]
            Specific feedback information

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendMessageFeedbackByAppGenerationResponse
            Successful response

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generation.send_message_feedback_by_app_generation(
                message_id="message_id",
                rating="rating",
                user="user",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"messages/{jsonable_encoder(message_id)}/feedbacks",
            method="POST",
            json={
                "rating": rating,
                "user": user,
                "content": content,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SendMessageFeedbackByAppGenerationResponse,
                    parse_obj_as(
                        type_=SendMessageFeedbackByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def convert_text_to_audio_by_app_generation(
        self,
        *,
        message_id: typing.Optional[str] = OMIT,
        text: typing.Optional[str] = OMIT,
        user: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.AsyncIterator[bytes]:
        """
        Convert text to speech

        Parameters
        ----------
        message_id : typing.Optional[str]
            Dify generated text message ID. The backend will find the corresponding content directly through the message_id to synthesize speech. If both message_id and text are provided, message_id takes precedence

        text : typing.Optional[str]
            Text content for speech generation. If message_id is not provided, this field will be used

        user : typing.Optional[str]
            User identifier, defined by developer rules, must be unique within the application

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Yields
        ------
        typing.AsyncIterator[bytes]
            Successful response
        """
        async with self._client_wrapper.httpx_client.stream(
            "text-to-audio",
            method="POST",
            json={
                "message_id": message_id,
                "text": text,
                "user": user,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        ) as _response:
            try:
                if 200 <= _response.status_code < 300:
                    _chunk_size = request_options.get("chunk_size", None) if request_options is not None else None
                    async for _chunk in _response.aiter_bytes(chunk_size=_chunk_size):
                        yield _chunk
                    return
                await _response.aread()
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_annotations_list_by_app_generation(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAnnotationsListByAppGenerationResponse:
        """
        Get the list of annotations for the application

        Parameters
        ----------
        page : typing.Optional[int]
            Page number

        limit : typing.Optional[int]
            Items per page

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAnnotationsListByAppGenerationResponse
            Successfully retrieved annotation list

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generation.get_annotations_list_by_app_generation()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "apps/annotations",
            method="GET",
            params={
                "page": page,
                "limit": limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetAnnotationsListByAppGenerationResponse,
                    parse_obj_as(
                        type_=GetAnnotationsListByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_annotation_by_app_generation(
        self,
        *,
        question: str,
        answer: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateAnnotationByAppGenerationResponse:
        """
        Create a new annotation

        Parameters
        ----------
        question : str
            Question

        answer : str
            Answer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateAnnotationByAppGenerationResponse
            Successfully created annotation

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generation.create_annotation_by_app_generation(
                question="question",
                answer="answer",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "apps/annotations",
            method="POST",
            json={
                "question": question,
                "answer": answer,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateAnnotationByAppGenerationResponse,
                    parse_obj_as(
                        type_=CreateAnnotationByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_annotation_by_app_generation(
        self,
        annotation_id: str,
        *,
        question: str,
        answer: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateAnnotationByAppGenerationResponse:
        """
        Update a specific annotation

        Parameters
        ----------
        annotation_id : str
            Annotation ID

        question : str
            Question

        answer : str
            Answer

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateAnnotationByAppGenerationResponse
            Successfully updated annotation

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generation.update_annotation_by_app_generation(
                annotation_id="annotation_id",
                question="question",
                answer="answer",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"apps/annotations/{jsonable_encoder(annotation_id)}",
            method="PUT",
            json={
                "question": question,
                "answer": answer,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateAnnotationByAppGenerationResponse,
                    parse_obj_as(
                        type_=UpdateAnnotationByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_annotation_by_app_generation(
        self,
        annotation_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteAnnotationByAppGenerationResponse:
        """
        Delete a specific annotation

        Parameters
        ----------
        annotation_id : str
            Annotation ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteAnnotationByAppGenerationResponse
            Successfully deleted annotation

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generation.delete_annotation_by_app_generation(
                annotation_id="annotation_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"apps/annotations/{jsonable_encoder(annotation_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DeleteAnnotationByAppGenerationResponse,
                    parse_obj_as(
                        type_=DeleteAnnotationByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def configure_annotation_reply_by_app_generation(
        self,
        action: ConfigureAnnotationReplyByAppGenerationRequestAction,
        *,
        embedding_model_provider: typing.Optional[str] = OMIT,
        embedding_model: typing.Optional[str] = OMIT,
        score_threshold: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConfigureAnnotationReplyByAppGenerationResponse:
        """
        Enable or disable annotation reply functionality

        Parameters
        ----------
        action : ConfigureAnnotationReplyByAppGenerationRequestAction
            Action, can only be 'enable' or 'disable'

        embedding_model_provider : typing.Optional[str]
            Specified embedding model provider, must be configured in the system first, corresponds to the provider field

        embedding_model : typing.Optional[str]
            Specified embedding model, corresponds to the model field

        score_threshold : typing.Optional[float]
            Similarity score threshold, when similarity is greater than this threshold, the system will automatically reply, otherwise it will not reply

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConfigureAnnotationReplyByAppGenerationResponse
            Successfully enabled or disabled annotation reply

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generation.configure_annotation_reply_by_app_generation(
                action="enable",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"apps/annotation-reply/{jsonable_encoder(action)}",
            method="POST",
            json={
                "embedding_model_provider": embedding_model_provider,
                "embedding_model": embedding_model,
                "score_threshold": score_threshold,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ConfigureAnnotationReplyByAppGenerationResponse,
                    parse_obj_as(
                        type_=ConfigureAnnotationReplyByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_annotation_reply_status_by_app_generation(
        self,
        action: GetAnnotationReplyStatusByAppGenerationRequestAction,
        job_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAnnotationReplyStatusByAppGenerationResponse:
        """
        Query the status of annotation reply initialization task

        Parameters
        ----------
        action : GetAnnotationReplyStatusByAppGenerationRequestAction
            Action, can only be 'enable' or 'disable', and must be consistent with the action in the annotation reply initialization interface

        job_id : str
            Job ID, returned from the annotation reply initialization interface

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAnnotationReplyStatusByAppGenerationResponse
            Successfully retrieved job status

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generation.get_annotation_reply_status_by_app_generation(
                action="enable",
                job_id="job_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"apps/annotation-reply/{jsonable_encoder(action)}/status/{jsonable_encoder(job_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetAnnotationReplyStatusByAppGenerationResponse,
                    parse_obj_as(
                        type_=GetAnnotationReplyStatusByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_app_meta_info_by_app_generation(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAppMetaInfoByAppGenerationResponse:
        """
        Used to get tool icons

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAppMetaInfoByAppGenerationResponse
            Successful response

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generation.get_app_meta_info_by_app_generation()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "meta",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetAppMetaInfoByAppGenerationResponse,
                    parse_obj_as(
                        type_=GetAppMetaInfoByAppGenerationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
