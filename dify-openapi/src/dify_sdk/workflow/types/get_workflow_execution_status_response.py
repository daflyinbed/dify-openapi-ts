# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .get_workflow_execution_status_response_status import (
    GetWorkflowExecutionStatusResponseStatus,
)
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class GetWorkflowExecutionStatusResponse(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Workflow execution ID
    """

    workflow_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Associated Workflow ID
    """

    status: typing.Optional[GetWorkflowExecutionStatusResponseStatus] = pydantic.Field(default=None)
    """
    Execution status
    """

    inputs: typing.Optional[str] = pydantic.Field(default=None)
    """
    Task input content
    """

    outputs: typing.Optional[str] = pydantic.Field(default=None)
    """
    Task output content
    """

    error: typing.Optional[str] = pydantic.Field(default=None)
    """
    Error reason
    """

    total_steps: typing.Optional[int] = pydantic.Field(default=None)
    """
    Total steps executed in the task
    """

    total_tokens: typing.Optional[int] = pydantic.Field(default=None)
    """
    Total tokens used in the task
    """

    created_at: typing.Optional[int] = pydantic.Field(default=None)
    """
    Task start time
    """

    finished_at: typing.Optional[int] = pydantic.Field(default=None)
    """
    Task end time
    """

    elapsed_time: typing.Optional[float] = pydantic.Field(default=None)
    """
    Time elapsed (seconds)
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
