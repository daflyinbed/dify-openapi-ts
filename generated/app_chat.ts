/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/chat-messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Chat Message (Conversational App)
         * @description Create conversation message
         */
        post: operations["sendChatMessageByAppChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Conversation List
         * @description Get conversation list for current user
         */
        get: operations["getConversationListByAppChat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/{conversation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Conversation */
        delete: operations["deleteConversationByAppChat"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/{conversation_id}/name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rename Conversation */
        post: operations["renameConversationByAppChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Conversation History Messages */
        get: operations["getConversationMessagesByAppChat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages/{message_id}/feedbacks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Message Feedback */
        post: operations["sendMessageFeedbackByAppChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages/{message_id}/suggested": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Suggested Questions
         * @description Get suggested questions for the next round
         */
        get: operations["getSuggestedQuestionsByAppChat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload File
         * @description Upload files for use when sending messages.
         *     Supported file types depend on application type and configuration.
         *     Uploaded files are only available to the current end user.
         *
         */
        post: operations["uploadFileByAppChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Application Basic Information */
        get: operations["getApplicationInfoByAppChat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat-messages/{task_id}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stop Response
         * @description Only supports streaming mode
         */
        post: operations["stopChatResponseByAppChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audio-to-text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Audio to Text
         * @description Convert audio to text
         */
        post: operations["convertAudioToTextByAppChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/text-to-audio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Text to Audio
         * @description Convert text to speech
         */
        post: operations["convertTextToAudioByAppChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parameters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Application Parameters */
        get: operations["getApplicationParametersByAppChat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/meta": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get App Meta Information
         * @description Used to get tool icons
         */
        get: operations["getAppMetaInfoByAppChat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/annotations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Annotation List
         * @description Get the list of annotations for the application
         */
        get: operations["getAnnotationsListByAppChat"];
        put?: never;
        /**
         * Create Annotation
         * @description Create a new annotation
         */
        post: operations["createAnnotationByAppChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/annotations/{annotation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Annotation
         * @description Update a specific annotation
         */
        put: operations["updateAnnotationByAppChat"];
        post?: never;
        /**
         * Delete Annotation
         * @description Delete a specific annotation
         */
        delete: operations["deleteAnnotationByAppChat"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/annotation-reply/{action}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Initialize Annotation Reply Settings
         * @description Enable or disable annotation reply functionality
         */
        post: operations["configureAnnotationReplyByAppChat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/annotation-reply/{action}/status/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Annotation Reply Settings Status
         * @description Query the status of annotation reply initialization task
         */
        get: operations["getAnnotationReplyStatusByAppChat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @description Error code */
            code: string;
            /** @description HTTP status code */
            status: number;
            /** @description Error message description */
            message: string;
        };
        Usage: {
            /** @description Number of tokens used for prompts */
            prompt_tokens?: number;
            /** @description Number of tokens used for completion */
            completion_tokens?: number;
            /** @description Total number of tokens used */
            total_tokens?: number;
            /** @description Unit price for prompts */
            prompt_unit_price?: string;
            /** @description Price unit for prompts */
            prompt_price_unit?: string;
            /** @description Total price for prompts */
            prompt_price?: string;
            /** @description Unit price for completion */
            completion_unit_price?: string;
            /** @description Price unit for completion */
            completion_price_unit?: string;
            /** @description Total price for completion */
            completion_price?: string;
            /** @description Total price */
            total_price?: string;
            /** @description Currency unit */
            currency?: string;
            /** @description Latency time */
            latency?: number;
        };
        RetrieverResource: {
            /** @description Position */
            position?: number;
            /** @description Dataset ID */
            dataset_id?: string;
            /** @description Dataset name */
            dataset_name?: string;
            /** @description Document ID */
            document_id?: string;
            /** @description Document name */
            document_name?: string;
            /** @description Segment ID */
            segment_id?: string;
            /** @description Relevance score */
            score?: number;
            /** @description Content */
            content?: string;
        };
        ChatCompletionResponse: {
            /** @description Unique message ID */
            message_id?: string;
            /** @description Message creation timestamp */
            created_at?: number;
            metadata?: {
                usage?: components["schemas"]["Usage"];
                retriever_resources?: components["schemas"]["RetrieverResource"][];
            };
            /** @description Conversation ID */
            conversation_id?: string;
            /** @description App mode, fixed as chat */
            mode?: string;
            /** @description Complete response content */
            answer?: string;
        };
        Conversation: {
            /** @description Conversation ID */
            id?: string;
            /** @description Conversation name */
            name?: string;
            /** @description User input parameters */
            inputs?: Record<string, never>;
            /** @description Conversation status */
            status?: string;
            /** @description Opening statement */
            introduction?: string;
            /** @description Creation time */
            created_at?: number;
            /** @description Update time */
            updated_at?: number;
        };
        FileInput: {
            /**
             * @description File type
             * @enum {string}
             */
            type?: "document" | "image" | "audio" | "video" | "custom";
            /**
             * @description Transfer method
             * @enum {string}
             */
            transfer_method?: "remote_url" | "local_file";
            /** @description Remote URL */
            url?: string;
            /** @description Upload file ID */
            upload_file_id?: string;
        };
        ChatHistoryMessage: {
            /** @description Message ID */
            id?: string;
            /** @description Conversation ID */
            conversation_id?: string;
            /** @description User input parameters */
            inputs?: Record<string, never>;
            /** @description User input/question content */
            query?: string;
            /** @description Message files */
            message_files?: {
                /** @description ID */
                id?: string;
                /** @description File type, image */
                type?: string;
                /** @description Preview image URL */
                url?: string;
                /** @description File ownership, user or assistant */
                belongs_to?: string;
            }[];
            /** @description Agent thinking content (only non-empty in Agent mode) */
            agent_thoughts?: {
                /** @description agent_thought ID, each Agent iteration round has a unique ID */
                id?: string;
                /** @description Unique message ID */
                message_id?: string;
                /** @description Position of agent_thought in the message, e.g., the first iteration has position 1 */
                position?: number;
                /** @description Agent's thinking content */
                thought?: string;
                /** @description Return result of tool call */
                observation?: string;
                /** @description List of tools used, multiple tools separated by ; */
                tool?: string;
                /** @description Tool input, JSON format string (object). E.g.: {"dalle3": {"prompt": "a cute cat"}} */
                tool_input?: string;
                /** @description Creation timestamp, e.g., 1705395332 */
                created_at?: number;
                /** @description File IDs associated with the current agent_thought */
                message_files?: string[];
                /** @description Conversation ID */
                conversation_id?: string;
            }[];
            /** @description Response message content */
            answer?: string;
            /** @description Creation time */
            created_at?: number;
            /** @description Feedback information */
            feedback?: {
                /**
                 * @description Like or dislike rating
                 * @enum {string}
                 */
                rating?: "like" | "dislike";
            };
            /** @description Citation and attribution segment list */
            retriever_resources?: components["schemas"]["RetrieverResource"][];
        };
        ChunkChatCompletionResponse: {
            /**
             * @description Event type, determines the structure of the response
             * @enum {string}
             */
            event?: "message" | "message_end" | "tts_message" | "tts_message_end" | "message_replace" | "error" | "ping" | "agent_message" | "agent_thought" | "message_file";
            /** @description Task ID for request tracking and stopping responses (used in message, message_end, tts_message, tts_message_end, message_replace, error, workflow events) */
            task_id?: string;
            /** @description Unique message ID (used in message, message_end, tts_message, tts_message_end, message_replace, error events) */
            message_id?: string;
            /** @description Conversation ID (used in message, message_end, message_replace, message_file, agent_message, agent_thought events) */
            conversation_id?: string;
            /** @description Workflow execution ID (used in workflow_started, node_started, node_finished, workflow_finished events) */
            workflow_run_id?: string;
            /** @description Response content (used in message, message_replace, agent_message events) */
            answer?: string;
            /** @description Voice synthesis audio data (base64 encoded) (used in tts_message, tts_message_end events) */
            audio?: string;
            /** @description Event related data (used in workflow_started, node_started, node_finished, workflow_finished events) */
            data?: Record<string, never>;
            /** @description Metadata including usage information and retriever resources (used in message_end event) */
            metadata?: {
                usage?: components["schemas"]["Usage"];
                retriever_resources?: components["schemas"]["RetrieverResource"][];
            };
            /** @description Creation timestamp (used in message, tts_message, tts_message_end, message_replace, agent_message, agent_thought events) */
            created_at?: number;
            /** @description Unique ID (used in agent_thought, message_file events) */
            id?: string;
            /** @description Position of agent_thought in the message, e.g., the first iteration has position 1 (used in agent_thought event) */
            position?: number;
            /** @description Agent's thinking content (used in agent_thought event) */
            thought?: string;
            /** @description Return result of tool call (used in agent_thought event) */
            observation?: string;
            /** @description List of tools used, multiple tools separated by ; (used in agent_thought event) */
            tool?: string;
            /** @description Tool input, JSON format string (used in agent_thought event) */
            tool_input?: string;
            /** @description File IDs associated with the current agent_thought (used in agent_thought event) */
            message_files?: string[];
            /** @description File type, currently only 'image' (used in message_file event) */
            type?: string;
            /** @description File ownership, user or assistant (used in message_file event) */
            belongs_to?: string;
            /** @description File access URL (used in message_file event) */
            url?: string;
        };
        UploadedFile: {
            /** @description File ID */
            id?: string;
            /** @description File name */
            name?: string;
            /** @description File size (bytes) */
            size?: number;
            /** @description File extension */
            extension?: string;
            /** @description File mime-type */
            mime_type?: string;
            /** @description Uploader ID */
            created_by?: string;
            /** @description Upload time */
            created_at?: number;
        };
    };
    responses: {
        /** @description Request error */
        Error400: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Non authorized or authentication failed */
        Error401: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        Error404: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Server error */
        Error500: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    sendChatMessageByAppChat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description User input/question content */
                    query: string;
                    /** @description Allows passing values for variables defined by the App. The inputs parameter contains multiple key/value pairs, where each key corresponds to a specific variable and each value is the value for that variable. Default {} */
                    inputs?: Record<string, never>;
                    /**
                     * @description Response mode:
                     *     - streaming: Streaming mode (recommended), implements typewriter-like output based on SSE
                     *     - blocking: Blocking mode, returns result after execution is complete (request may be interrupted if the process is too long)
                     *     Note: Blocking mode is not allowed in Agent mode
                     *
                     * @enum {string}
                     */
                    response_mode?: "streaming" | "blocking";
                    /** @description User identifier for defining end user identity, facilitating retrieval and statistics. Defined by developer rules, must be unique within the application. */
                    user?: string;
                    /** @description (Optional) Conversation ID. Required when continuing a conversation based on previous chat history, must pass the conversation_id from previous messages */
                    conversation_id?: string;
                    /** @description Uploaded files */
                    files?: {
                        /**
                         * @description Supported type: image (currently only supports image formats)
                         * @enum {string}
                         */
                        type?: "image";
                        /**
                         * @description Transfer method
                         * @enum {string}
                         */
                        transfer_method?: "remote_url" | "local_file";
                        /** @description Image URL (only when transfer_method is remote_url) */
                        url?: string;
                        /** @description Upload file ID (only when transfer_method is local_file) */
                        upload_file_id?: string;
                    }[];
                    /**
                     * @description (Optional) Whether to automatically generate title, default is true. If set to false, you can call the conversation rename interface and set auto_generate to true to generate a title asynchronously.
                     * @default true
                     */
                    auto_generate_name?: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatCompletionResponse"];
                    "text/event-stream": components["schemas"]["ChunkChatCompletionResponse"];
                };
            };
            400: components["responses"]["Error400"];
            404: components["responses"]["Error404"];
            500: components["responses"]["Error500"];
        };
    };
    getConversationListByAppChat: {
        parameters: {
            query: {
                /** @description User identifier */
                user: string;
                /** @description ID of the last record on current page */
                last_id?: string;
                /** @description Records per page */
                limit?: number;
                /** @description Sort field */
                sort_by?: "created_at" | "-created_at" | "updated_at" | "-updated_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Conversation"][];
                        has_more?: boolean;
                        limit?: number;
                    };
                };
            };
        };
    };
    deleteConversationByAppChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Conversation ID */
                conversation_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description User identifier */
                    user: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        result?: "success";
                    };
                };
            };
        };
    };
    renameConversationByAppChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversation_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description New name */
                    name?: string;
                    /**
                     * @description Whether to automatically generate
                     * @default false
                     */
                    auto_generate?: boolean;
                    /** @description User identifier */
                    user: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Conversation"];
                };
            };
        };
    };
    getConversationMessagesByAppChat: {
        parameters: {
            query: {
                /** @description Conversation ID */
                conversation_id: string;
                /** @description User identifier */
                user: string;
                /** @description First message ID */
                first_id?: string;
                /** @description Limit */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ChatHistoryMessage"][];
                        has_more?: boolean;
                        limit?: number;
                    };
                };
            };
        };
    };
    sendMessageFeedbackByAppChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Message ID */
                message_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Feedback type
                     * @enum {string}
                     */
                    rating: "like" | "dislike" | null;
                    /** @description User identifier */
                    user: string;
                    /** @description Feedback content */
                    content?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        result?: "success";
                    };
                };
            };
        };
    };
    getSuggestedQuestionsByAppChat: {
        parameters: {
            query: {
                /** @description User identifier, defined by the developer, must be unique within the application */
                user: string;
            };
            header?: never;
            path: {
                /** @description Message ID */
                message_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved suggested questions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Fixed return value 'success' */
                        result?: string;
                        /** @description List of suggested questions */
                        data?: string[];
                    };
                };
            };
        };
    };
    uploadFileByAppChat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description File to upload
                     */
                    file: string;
                    /** @description User identifier */
                    user?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadedFile"];
                };
            };
            400: components["responses"]["Error400"];
            /** @description File too large */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unsupported file type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Storage service error */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getApplicationInfoByAppChat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Application name */
                        name?: string;
                        /** @description Application description */
                        description?: string;
                        /** @description Application tags */
                        tags?: string[];
                    };
                };
            };
        };
    };
    stopChatResponseByAppChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Task ID, can be obtained from the streaming response chunks */
                task_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description User identifier, must be consistent with the user passed in the message sending interface */
                    user: string;
                };
            };
        };
        responses: {
            /** @description Successfully stopped the response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Fixed return value 'success'
                         * @enum {string}
                         */
                        result?: "success";
                    };
                };
            };
        };
    };
    convertAudioToTextByAppChat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description Audio file
                     */
                    file: string;
                    /** @description User identifier */
                    user?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Converted text */
                        text?: string;
                    };
                };
            };
        };
    };
    convertTextToAudioByAppChat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Dify generated text message ID. The backend will find the corresponding content directly through the message_id to synthesize speech. If both message_id and text are provided, message_id takes precedence */
                    message_id?: string;
                    /** @description Text content for speech generation. If message_id is not provided, this field will be used */
                    text?: string;
                    /** @description User identifier, defined by developer rules, must be unique within the application */
                    user?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "audio/wav": string;
                };
            };
        };
    };
    getApplicationParametersByAppChat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Opening statement */
                        opening_statement?: string;
                        /** @description List of suggested opening questions */
                        suggested_questions?: string[];
                        /** @description Settings for suggested questions after answer */
                        suggested_questions_after_answer?: {
                            enabled?: boolean;
                        };
                        /** @description Audio to text settings */
                        speech_to_text?: {
                            enabled?: boolean;
                        };
                        /** @description Citation and attribution settings */
                        retriever_resource?: {
                            enabled?: boolean;
                        };
                        /** @description Annotation reply settings */
                        annotation_reply?: {
                            enabled?: boolean;
                        };
                        /** @description User input form configuration */
                        user_input_form?: Record<string, never>[];
                        /** @description File upload configuration */
                        file_upload?: Record<string, never>;
                        /** @description System parameters */
                        system_parameters?: {
                            /** @description Document upload size limit (MB) */
                            file_size_limit?: number;
                            /** @description Image file upload size limit (MB) */
                            image_file_size_limit?: number;
                            /** @description Audio file upload size limit (MB) */
                            audio_file_size_limit?: number;
                            /** @description Video file upload size limit (MB) */
                            video_file_size_limit?: number;
                        };
                    };
                };
            };
        };
    };
    getAppMetaInfoByAppChat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Tool icons */
                        tool_icons?: {
                            [key: string]: {
                                /** @description Background color in hex format */
                                background?: string;
                                /** @description Emoji */
                                content?: string;
                            } | string;
                        };
                    };
                };
            };
        };
    };
    getAnnotationsListByAppChat: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Items per page */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved annotation list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @description Annotation ID */
                            id?: string;
                            /** @description Question */
                            question?: string;
                            /** @description Answer */
                            answer?: string;
                            /** @description Hit count */
                            hit_count?: number;
                            /** @description Creation timestamp */
                            created_at?: number;
                        }[];
                        /** @description Whether there is more data */
                        has_more?: boolean;
                        /** @description Items per page */
                        limit?: number;
                        /** @description Total record count */
                        total?: number;
                        /** @description Current page number */
                        page?: number;
                    };
                };
            };
        };
    };
    createAnnotationByAppChat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Question */
                    question: string;
                    /** @description Answer */
                    answer: string;
                };
            };
        };
        responses: {
            /** @description Successfully created annotation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Annotation ID */
                        id?: string;
                        /** @description Question */
                        question?: string;
                        /** @description Answer */
                        answer?: string;
                        /** @description Hit count */
                        hit_count?: number;
                        /** @description Creation timestamp */
                        created_at?: number;
                    };
                };
            };
        };
    };
    updateAnnotationByAppChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Annotation ID */
                annotation_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Question */
                    question: string;
                    /** @description Answer */
                    answer: string;
                };
            };
        };
        responses: {
            /** @description Successfully updated annotation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Annotation ID */
                        id?: string;
                        /** @description Question */
                        question?: string;
                        /** @description Answer */
                        answer?: string;
                        /** @description Hit count */
                        hit_count?: number;
                        /** @description Creation timestamp */
                        created_at?: number;
                    };
                };
            };
        };
    };
    deleteAnnotationByAppChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Annotation ID */
                annotation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted annotation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        result?: "success";
                    };
                };
            };
        };
    };
    configureAnnotationReplyByAppChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Action, can only be 'enable' or 'disable' */
                action: "enable" | "disable";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Specified embedding model provider, must be configured in the system first, corresponds to the provider field */
                    embedding_model_provider?: string;
                    embedding_provider_name?: string;
                    /** @description Specified embedding model, corresponds to the model field */
                    embedding_model?: string;
                    embedding_model_name?: string;
                    /** @description Similarity score threshold, when similarity is greater than this threshold, the system will automatically reply, otherwise it will not reply */
                    score_threshold?: number;
                };
            };
        };
        responses: {
            /** @description Successfully enabled or disabled annotation reply */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Job ID */
                        job_id?: string;
                        /** @description Job status */
                        job_status?: string;
                    };
                };
            };
        };
    };
    getAnnotationReplyStatusByAppChat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Action, can only be 'enable' or 'disable', and must be consistent with the action in the annotation reply initialization interface */
                action: "enable" | "disable";
                /** @description Job ID, returned from the annotation reply initialization interface */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved job status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Job ID */
                        job_id?: string;
                        /** @description Job status */
                        job_status?: string;
                        /** @description Error message */
                        error_msg?: string;
                    };
                };
            };
        };
    };
}
