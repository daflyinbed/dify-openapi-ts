# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .embedding_model_models_item_label import EmbeddingModelModelsItemLabel
from .embedding_model_models_item_model_properties import (
    EmbeddingModelModelsItemModelProperties,
)
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class EmbeddingModelModelsItem(UniversalBaseModel):
    model: typing.Optional[str] = pydantic.Field(default=None)
    """
    Model name
    """

    label: typing.Optional[EmbeddingModelModelsItemLabel] = pydantic.Field(default=None)
    """
    Model label
    """

    model_type: typing.Optional[str] = pydantic.Field(default=None)
    """
    Model type
    """

    features: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Features
    """

    fetch_from: typing.Optional[str] = pydantic.Field(default=None)
    """
    Fetch source
    """

    model_properties: typing.Optional[EmbeddingModelModelsItemModelProperties] = pydantic.Field(default=None)
    """
    Model properties
    """

    deprecated: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether deprecated
    """

    status: typing.Optional[str] = pydantic.Field(default=None)
    """
    Status
    """

    load_balancing_enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether load balancing is enabled
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
