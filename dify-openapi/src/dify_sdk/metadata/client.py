# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from .types.list_dataset_metadata_response import ListDatasetMetadataResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .types.create_metadata_response import CreateMetadataResponse
from .types.update_metadata_response import UpdateMetadataResponse
from .types.toggle_built_in_metadata_request_action import (
    ToggleBuiltInMetadataRequestAction,
)
from .types.update_documents_metadata_request_operation_data_item import (
    UpdateDocumentsMetadataRequestOperationDataItem,
)
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MetadataClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_dataset_metadata(
        self,
        dataset_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListDatasetMetadataResponse:
        """
        Get list of metadata fields for a dataset

        Parameters
        ----------
        dataset_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDatasetMetadataResponse
            OK

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.metadata.list_dataset_metadata(
            dataset_id="dataset_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/metadata",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListDatasetMetadataResponse,
                    parse_obj_as(
                        type_=ListDatasetMetadataResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_metadata(
        self,
        dataset_id: str,
        *,
        type: str,
        name: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateMetadataResponse:
        """
        Create a new metadata field

        Parameters
        ----------
        dataset_id : str

        type : str
            Metadata type

        name : str
            Metadata name

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateMetadataResponse
            OK

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.metadata.create_metadata(
            dataset_id="dataset_id",
            type="type",
            name="name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/metadata",
            method="POST",
            json={
                "type": type,
                "name": name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateMetadataResponse,
                    parse_obj_as(
                        type_=CreateMetadataResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_metadata(
        self,
        dataset_id: str,
        metadata_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a metadata field

        Parameters
        ----------
        dataset_id : str

        metadata_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.metadata.delete_metadata(
            dataset_id="dataset_id",
            metadata_id="metadata_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/metadata/{jsonable_encoder(metadata_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_metadata(
        self,
        dataset_id: str,
        metadata_id: str,
        *,
        name: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateMetadataResponse:
        """
        Update an existing metadata field

        Parameters
        ----------
        dataset_id : str

        metadata_id : str

        name : str
            New metadata name

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateMetadataResponse
            OK

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.metadata.update_metadata(
            dataset_id="dataset_id",
            metadata_id="metadata_id",
            name="name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/metadata/{jsonable_encoder(metadata_id)}",
            method="PATCH",
            json={
                "name": name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateMetadataResponse,
                    parse_obj_as(
                        type_=UpdateMetadataResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def toggle_built_in_metadata(
        self,
        dataset_id: str,
        action: ToggleBuiltInMetadataRequestAction,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Toggle built-in metadata fields

        Parameters
        ----------
        dataset_id : str

        action : ToggleBuiltInMetadataRequestAction

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.metadata.toggle_built_in_metadata(
            dataset_id="dataset_id",
            action="enable",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/metadata/built-in/{jsonable_encoder(action)}",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_documents_metadata(
        self,
        dataset_id: str,
        *,
        operation_data: typing.Optional[typing.Sequence[UpdateDocumentsMetadataRequestOperationDataItem]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Update metadata for multiple documents

        Parameters
        ----------
        dataset_id : str

        operation_data : typing.Optional[typing.Sequence[UpdateDocumentsMetadataRequestOperationDataItem]]
            List of document metadata operations

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.metadata.update_documents_metadata(
            dataset_id="dataset_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/metadata",
            method="POST",
            json={
                "operation_data": convert_and_respect_annotation_metadata(
                    object_=operation_data,
                    annotation=typing.Sequence[UpdateDocumentsMetadataRequestOperationDataItem],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncMetadataClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_dataset_metadata(
        self,
        dataset_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListDatasetMetadataResponse:
        """
        Get list of metadata fields for a dataset

        Parameters
        ----------
        dataset_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDatasetMetadataResponse
            OK

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.metadata.list_dataset_metadata(
                dataset_id="dataset_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/metadata",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListDatasetMetadataResponse,
                    parse_obj_as(
                        type_=ListDatasetMetadataResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_metadata(
        self,
        dataset_id: str,
        *,
        type: str,
        name: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateMetadataResponse:
        """
        Create a new metadata field

        Parameters
        ----------
        dataset_id : str

        type : str
            Metadata type

        name : str
            Metadata name

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateMetadataResponse
            OK

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.metadata.create_metadata(
                dataset_id="dataset_id",
                type="type",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/metadata",
            method="POST",
            json={
                "type": type,
                "name": name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateMetadataResponse,
                    parse_obj_as(
                        type_=CreateMetadataResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_metadata(
        self,
        dataset_id: str,
        metadata_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete a metadata field

        Parameters
        ----------
        dataset_id : str

        metadata_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.metadata.delete_metadata(
                dataset_id="dataset_id",
                metadata_id="metadata_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/metadata/{jsonable_encoder(metadata_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_metadata(
        self,
        dataset_id: str,
        metadata_id: str,
        *,
        name: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateMetadataResponse:
        """
        Update an existing metadata field

        Parameters
        ----------
        dataset_id : str

        metadata_id : str

        name : str
            New metadata name

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateMetadataResponse
            OK

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.metadata.update_metadata(
                dataset_id="dataset_id",
                metadata_id="metadata_id",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/metadata/{jsonable_encoder(metadata_id)}",
            method="PATCH",
            json={
                "name": name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    UpdateMetadataResponse,
                    parse_obj_as(
                        type_=UpdateMetadataResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def toggle_built_in_metadata(
        self,
        dataset_id: str,
        action: ToggleBuiltInMetadataRequestAction,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Toggle built-in metadata fields

        Parameters
        ----------
        dataset_id : str

        action : ToggleBuiltInMetadataRequestAction

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.metadata.toggle_built_in_metadata(
                dataset_id="dataset_id",
                action="enable",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/metadata/built-in/{jsonable_encoder(action)}",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_documents_metadata(
        self,
        dataset_id: str,
        *,
        operation_data: typing.Optional[typing.Sequence[UpdateDocumentsMetadataRequestOperationDataItem]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Update metadata for multiple documents

        Parameters
        ----------
        dataset_id : str

        operation_data : typing.Optional[typing.Sequence[UpdateDocumentsMetadataRequestOperationDataItem]]
            List of document metadata operations

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.metadata.update_documents_metadata(
                dataset_id="dataset_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(dataset_id)}/documents/metadata",
            method="POST",
            json={
                "operation_data": convert_and_respect_annotation_metadata(
                    object_=operation_data,
                    annotation=typing.Sequence[UpdateDocumentsMetadataRequestOperationDataItem],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
