/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/retrieval": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retrieve Knowledge Content
         * @description Retrieve relevant content from external knowledge base based on user query
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description Your knowledge's unique ID
                         * @example AAA-BBB-CCC
                         */
                        knowledge_id: string;
                        /**
                         * @description User's query
                         * @example What is Dify?
                         */
                        query: string;
                        /** @description Knowledge's retrieval parameters */
                        retrieval_setting: {
                            /**
                             * @description Maximum number of retrieved results
                             * @example 5
                             */
                            top_k: number;
                            /**
                             * @description The score limit of relevance of the result to the query, scope: 0~1
                             * @example 0.5
                             */
                            score_threshold: number;
                        };
                        /** @description Original array filtering */
                        metadata_condition?: {
                            /**
                             * @description Logical operator, values can be 'and' or 'or', default is 'and'
                             * @example and
                             * @enum {string}
                             */
                            logical_operator?: "and" | "or";
                            /** @description List of conditions */
                            conditions?: {
                                /**
                                 * @description Names of the metadata to filter
                                 * @example [
                                 *       "category",
                                 *       "tag"
                                 *     ]
                                 */
                                name: string[];
                                /**
                                 * @description Comparison operator
                                 * @example contains
                                 * @enum {string}
                                 */
                                comparison_operator: "contains" | "not contains" | "start with" | "end with" | "is" | "is not" | "empty" | "not empty" | "=" | "≠" | ">" | "<" | "≥" | "≤" | "before" | "after";
                                /**
                                 * @description Comparison value, can be omitted when the operator is 'empty', 'not empty', 'null', or 'not null'
                                 * @example AI
                                 */
                                value?: string;
                            }[];
                        };
                    };
                };
            };
            responses: {
                /** @description Successfully retrieved results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            records: {
                                /**
                                 * @description Contains a chunk of text from a data source in the knowledge base
                                 * @example Dify:The Innovation Engine for GenAI Applications
                                 */
                                content: string;
                                /**
                                 * @description The score of relevance of the result to the query, scope: 0~1
                                 * @example 0.5
                                 */
                                score: number;
                                /**
                                 * @description Document title
                                 * @example Dify Introduction
                                 */
                                title: string;
                                /**
                                 * @description Contains metadata attributes and their values for the document in the data source
                                 * @example {
                                 *       "path": "s3://dify/knowledge.txt",
                                 *       "description": "dify knowledge document"
                                 *     }
                                 */
                                metadata?: Record<string, never>;
                            }[];
                        };
                    };
                };
                /** @description Access denied */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /**
             * @description Error code
             * @example 1001
             * @enum {integer}
             */
            error_code: 1001 | 1002 | 2001;
            /**
             * @description The description of API exception
             * @example Invalid Authorization header format. Expected 'Bearer ' format.
             */
            error_msg: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
