# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .get_application_parameters_by_app_chat_response_suggested_questions_after_answer import (
    GetApplicationParametersByAppChatResponseSuggestedQuestionsAfterAnswer,
)
from .get_application_parameters_by_app_chat_response_speech_to_text import (
    GetApplicationParametersByAppChatResponseSpeechToText,
)
from .get_application_parameters_by_app_chat_response_retriever_resource import (
    GetApplicationParametersByAppChatResponseRetrieverResource,
)
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class GetApplicationParametersByAppChatResponse(UniversalBaseModel):
    opening_statement: typing.Optional[str] = pydantic.Field(default=None)
    """
    Opening statement
    """

    suggested_questions: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    List of suggested opening questions
    """

    suggested_questions_after_answer: typing.Optional[
        GetApplicationParametersByAppChatResponseSuggestedQuestionsAfterAnswer
    ] = pydantic.Field(default=None)
    """
    Settings for suggested questions after answer
    """

    speech_to_text: typing.Optional[GetApplicationParametersByAppChatResponseSpeechToText] = pydantic.Field(
        default=None
    )
    """
    Audio to text settings
    """

    retriever_resource: typing.Optional[GetApplicationParametersByAppChatResponseRetrieverResource] = pydantic.Field(
        default=None
    )
    """
    Citation and attribution settings
    """

    user_input_form: typing.Optional[typing.List[typing.Dict[str, typing.Optional[typing.Any]]]] = pydantic.Field(
        default=None
    )
    """
    User input form configuration
    """

    file_upload: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    File upload configuration
    """

    system_parameters: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    System parameters
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
