# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .stream_event_data_status import StreamEventDataStatus
from .stream_event_data_execution_metadata import StreamEventDataExecutionMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class StreamEventData(UniversalBaseModel):
    """
    Event related data
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Workflow execution ID or node execution ID
    """

    workflow_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Associated Workflow ID
    """

    node_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Node ID
    """

    node_type: typing.Optional[str] = pydantic.Field(default=None)
    """
    Node type
    """

    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    Node name
    """

    index: typing.Optional[int] = pydantic.Field(default=None)
    """
    Execution sequence number, used to display Tracing Node order
    """

    predecessor_node_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Predecessor node ID, used to display execution path on canvas
    """

    inputs: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    All predecessor node variable content used in the node
    """

    process_data: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Node process data
    """

    outputs: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Output content
    """

    status: typing.Optional[StreamEventDataStatus] = pydantic.Field(default=None)
    """
    Execution status
    """

    error: typing.Optional[str] = pydantic.Field(default=None)
    """
    Error reason
    """

    elapsed_time: typing.Optional[float] = pydantic.Field(default=None)
    """
    Elapsed time (s)
    """

    execution_metadata: typing.Optional[StreamEventDataExecutionMetadata] = pydantic.Field(default=None)
    """
    Metadata
    """

    sequence_number: typing.Optional[int] = pydantic.Field(default=None)
    """
    Auto-incrementing sequence number, starting from 1 within the App
    """

    total_steps: typing.Optional[int] = pydantic.Field(default=None)
    """
    Total steps
    """

    total_tokens: typing.Optional[int] = pydantic.Field(default=None)
    """
    Total tokens used
    """

    created_at: typing.Optional[int] = pydantic.Field(default=None)
    """
    Start time
    """

    finished_at: typing.Optional[int] = pydantic.Field(default=None)
    """
    End time
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
