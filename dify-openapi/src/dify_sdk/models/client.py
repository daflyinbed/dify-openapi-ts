# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from ..core.request_options import RequestOptions
from .types.get_workspaces_current_models_model_types_text_embedding_response import (
    GetWorkspacesCurrentModelsModelTypesTextEmbeddingResponse,
)
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from ..types.error import Error
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper


class ModelsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_embedding_model_list(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetWorkspacesCurrentModelsModelTypesTextEmbeddingResponse:
        """
        Get a list of available embedding models for the current workspace

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetWorkspacesCurrentModelsModelTypesTextEmbeddingResponse
            Successfully retrieved embedding model list

        Examples
        --------
        from dify import DifyApi

        client = DifyApi(
            token="YOUR_TOKEN",
        )
        client.models.get_embedding_model_list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "workspaces/current/models/model-types/text-embedding",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetWorkspacesCurrentModelsModelTypesTextEmbeddingResponse,
                    parse_obj_as(
                        type_=GetWorkspacesCurrentModelsModelTypesTextEmbeddingResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncModelsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_embedding_model_list(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetWorkspacesCurrentModelsModelTypesTextEmbeddingResponse:
        """
        Get a list of available embedding models for the current workspace

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetWorkspacesCurrentModelsModelTypesTextEmbeddingResponse
            Successfully retrieved embedding model list

        Examples
        --------
        import asyncio

        from dify import AsyncDifyApi

        client = AsyncDifyApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.models.get_embedding_model_list()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "workspaces/current/models/model-types/text-embedding",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetWorkspacesCurrentModelsModelTypesTextEmbeddingResponse,
                    parse_obj_as(
                        type_=GetWorkspacesCurrentModelsModelTypesTextEmbeddingResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
