# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
from .process_rule_mode import ProcessRuleMode
import pydantic
import typing
from .process_rule_rules import ProcessRuleRules
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ProcessRule(UniversalBaseModel):
    mode: ProcessRuleMode = pydantic.Field()
    """
    Cleaning and segmentation mode
    """

    rules: typing.Optional[ProcessRuleRules] = pydantic.Field(default=None)
    """
    Custom rules (empty for automatic mode)
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
