# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Usage(UniversalBaseModel):
    prompt_tokens: typing.Optional[int] = pydantic.Field(default=None)
    """
    Number of tokens used for prompts
    """

    completion_tokens: typing.Optional[int] = pydantic.Field(default=None)
    """
    Number of tokens used for completion
    """

    total_tokens: typing.Optional[int] = pydantic.Field(default=None)
    """
    Total number of tokens used
    """

    prompt_unit_price: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unit price for prompts
    """

    prompt_price_unit: typing.Optional[str] = pydantic.Field(default=None)
    """
    Price unit for prompts
    """

    prompt_price: typing.Optional[str] = pydantic.Field(default=None)
    """
    Total price for prompts
    """

    completion_unit_price: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unit price for completion
    """

    completion_price_unit: typing.Optional[str] = pydantic.Field(default=None)
    """
    Price unit for completion
    """

    completion_price: typing.Optional[str] = pydantic.Field(default=None)
    """
    Total price for completion
    """

    total_price: typing.Optional[str] = pydantic.Field(default=None)
    """
    Total price
    """

    currency: typing.Optional[str] = pydantic.Field(default=None)
    """
    Currency unit
    """

    latency: typing.Optional[float] = pydantic.Field(default=None)
    """
    Latency time
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
