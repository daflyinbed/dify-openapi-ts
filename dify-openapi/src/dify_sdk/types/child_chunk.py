# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ChildChunk(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Child segment ID
    """

    segment_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Parent segment ID
    """

    content: typing.Optional[str] = pydantic.Field(default=None)
    """
    Child segment content
    """

    word_count: typing.Optional[int] = pydantic.Field(default=None)
    """
    Word count
    """

    tokens: typing.Optional[int] = pydantic.Field(default=None)
    """
    Token count
    """

    index_node_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Index node ID
    """

    index_node_hash: typing.Optional[str] = pydantic.Field(default=None)
    """
    Index node hash
    """

    status: typing.Optional[str] = pydantic.Field(default=None)
    """
    Status
    """

    created_by: typing.Optional[str] = pydantic.Field(default=None)
    """
    Creator
    """

    created_at: typing.Optional[float] = pydantic.Field(default=None)
    """
    Creation timestamp
    """

    indexing_at: typing.Optional[float] = pydantic.Field(default=None)
    """
    Indexing timestamp
    """

    completed_at: typing.Optional[float] = pydantic.Field(default=None)
    """
    Completion timestamp
    """

    error: typing.Optional[str] = pydantic.Field(default=None)
    """
    Error message
    """

    stopped_at: typing.Optional[float] = pydantic.Field(default=None)
    """
    Stop timestamp
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
