# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .document_segment_status import DocumentSegmentStatus
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class DocumentSegment(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Segment ID
    """

    document_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Document ID
    """

    content: typing.Optional[str] = pydantic.Field(default=None)
    """
    Segment content
    """

    answer: typing.Optional[str] = pydantic.Field(default=None)
    """
    Answer (if mode is Q&A)
    """

    word_count: typing.Optional[int] = pydantic.Field(default=None)
    """
    Word count
    """

    vector: typing.Optional[typing.List[float]] = pydantic.Field(default=None)
    """
    Vector data
    """

    created_by: typing.Optional[str] = pydantic.Field(default=None)
    """
    Creator
    """

    created_at: typing.Optional[float] = pydantic.Field(default=None)
    """
    Creation timestamp
    """

    updated_by: typing.Optional[str] = pydantic.Field(default=None)
    """
    Last updated by
    """

    updated_at: typing.Optional[float] = pydantic.Field(default=None)
    """
    Last updated timestamp
    """

    status: typing.Optional[DocumentSegmentStatus] = pydantic.Field(default=None)
    """
    Segment status
    """

    indexing_at: typing.Optional[float] = pydantic.Field(default=None)
    """
    Indexing timestamp
    """

    completed_at: typing.Optional[float] = pydantic.Field(default=None)
    """
    Completion timestamp
    """

    position: typing.Optional[int] = pydantic.Field(default=None)
    """
    Position
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
