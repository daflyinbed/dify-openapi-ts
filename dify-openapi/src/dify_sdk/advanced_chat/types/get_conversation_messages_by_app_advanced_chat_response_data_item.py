# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .get_conversation_messages_by_app_advanced_chat_response_data_item_message_files_item import (
    GetConversationMessagesByAppAdvancedChatResponseDataItemMessageFilesItem,
)
from .get_conversation_messages_by_app_advanced_chat_response_data_item_feedback import (
    GetConversationMessagesByAppAdvancedChatResponseDataItemFeedback,
)
from ...types.retriever_resource import RetrieverResource
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class GetConversationMessagesByAppAdvancedChatResponseDataItem(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Message ID
    """

    conversation_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Conversation ID
    """

    inputs: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    User input parameters.
    """

    query: typing.Optional[str] = pydantic.Field(default=None)
    """
    User input / question content.
    """

    message_files: typing.Optional[
        typing.List[GetConversationMessagesByAppAdvancedChatResponseDataItemMessageFilesItem]
    ] = pydantic.Field(default=None)
    """
    Message files
    """

    answer: typing.Optional[str] = pydantic.Field(default=None)
    """
    Response message content
    """

    created_at: typing.Optional[int] = pydantic.Field(default=None)
    """
    Creation time
    """

    feedback: typing.Optional[GetConversationMessagesByAppAdvancedChatResponseDataItemFeedback] = pydantic.Field(
        default=None
    )
    """
    Feedback information
    """

    retriever_resources: typing.Optional[typing.List[RetrieverResource]] = pydantic.Field(default=None)
    """
    List of referenced and attributed segments
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
