/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/datasets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Knowledge Base List
         * @description Get a list of all knowledge bases
         */
        get: operations["getDatasetList"];
        put?: never;
        /**
         * Create Empty Knowledge Base
         * @description Create a new empty knowledge base
         */
        post: operations["createEmptyDataset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{dataset_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * View Knowledge Base Details
         * @description Get detailed information about a specific knowledge base
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Knowledge Base ID */
                    dataset_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved knowledge base details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Dataset"];
                    };
                };
                400: components["responses"]["Error400"];
                403: components["responses"]["Error403"];
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete Knowledge Base
         * @description Delete specified knowledge base
         */
        delete: operations["deleteDataset"];
        options?: never;
        head?: never;
        /**
         * Update Knowledge Base Details
         * @description Modify details of a specific knowledge base
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Knowledge Base ID */
                    dataset_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Knowledge Base name (optional) */
                        name?: string;
                        /**
                         * @description Indexing mode (optional, recommended)
                         *     - high_quality: High quality
                         *     - economy: Economy
                         *
                         * @enum {string}
                         */
                        indexing_technique?: "high_quality" | "economy";
                        /**
                         * @description Permission (optional, default only_me)
                         *     - only_me: Only me
                         *     - all_team_members: All team members
                         *     - partial_members: Partial team members
                         *
                         * @enum {string}
                         */
                        permission?: "only_me" | "all_team_members" | "partial_members";
                        /** @description Embedding model provider (optional), must be configured in the system first, corresponds to the provider field */
                        embedding_model_provider?: string;
                        /** @description Embedding model (optional) */
                        embedding_model?: string;
                        /** @description Retrieval model (optional) */
                        retrieval_model?: string;
                        /** @description Partial team members ID list (optional) */
                        partial_member_list?: string[];
                    };
                };
            };
            responses: {
                /** @description Successfully updated knowledge base details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Dataset"];
                    };
                };
                400: components["responses"]["Error400"];
                403: components["responses"]["Error403"];
            };
        };
        trace?: never;
    };
    "/datasets/{dataset_id}/retrieve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retrieve Knowledge Base
         * @description Retrieve content from specified knowledge base
         */
        post: operations["retrieveDataset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{dataset_id}/document/create-by-text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Document by Text
         * @description Create a new document from text based on existing knowledge base
         */
        post: operations["createDocumentByText"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{dataset_id}/document/create-by-file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Document by File
         * @description Create a new document from file based on existing knowledge base
         */
        post: operations["createDocumentByFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{dataset_id}/documents/{document_id}/update-by-text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Document by Text
         * @description Update existing document using text
         */
        post: operations["updateDocumentByText"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{dataset_id}/documents/{document_id}/update-by-file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Document by File
         * @description Update existing document using file
         */
        post: operations["updateDocumentByFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{dataset_id}/documents/{batch}/indexing-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Document Embedding Status
         * @description Get document processing and indexing progress status
         */
        get: operations["getDocumentIndexingStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{dataset_id}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Knowledge Base Document List
         * @description Get a list of all documents in the specified knowledge base
         */
        get: operations["getDocumentList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{dataset_id}/documents/{document_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Document
         * @description Delete specified document
         */
        delete: operations["deleteDocument"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{dataset_id}/documents/{document_id}/segments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Document Segments
         * @description Get all segments of specified document
         */
        get: operations["getSegments"];
        put?: never;
        /**
         * Add Segment
         * @description Add a new segment to specified document
         */
        post: operations["createSegments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Document Child Segments
         * @description Get all child segments of a specified segment
         */
        get: {
            parameters: {
                query?: {
                    /** @description Search keyword (optional) */
                    keyword?: string;
                    /** @description Page number (optional, default 1) */
                    page?: number;
                    /** @description Items per page (optional, default 20, max 100) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Knowledge Base ID */
                    dataset_id: string;
                    /** @description Document ID */
                    document_id: string;
                    /** @description Segment ID */
                    segment_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved child segment list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["ChildChunk"][];
                            /** @description Total record count */
                            total?: number;
                            /** @description Total pages */
                            total_pages?: number;
                            /** @description Current page number */
                            page?: number;
                            /** @description Items per page */
                            limit?: number;
                        };
                    };
                };
                400: components["responses"]["Error400"];
            };
        };
        put?: never;
        /**
         * Create Document Child Segment
         * @description Add a new child segment to a specified segment
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Knowledge Base ID */
                    dataset_id: string;
                    /** @description Document ID */
                    document_id: string;
                    /** @description Segment ID */
                    segment_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Child segment content */
                        content: string;
                    };
                };
            };
            responses: {
                /** @description Successfully created child segment */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["ChildChunk"];
                        };
                    };
                };
                400: components["responses"]["Error400"];
                403: components["responses"]["Error403"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}/child_chunks/{child_chunk_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Document Child Segment
         * @description Delete a specified document child segment
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Knowledge Base ID */
                    dataset_id: string;
                    /** @description Document ID */
                    document_id: string;
                    /** @description Segment ID */
                    segment_id: string;
                    /** @description Child Segment ID */
                    child_chunk_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully deleted child segment */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            result?: "success";
                        };
                    };
                };
                400: components["responses"]["Error400"];
                403: components["responses"]["Error403"];
            };
        };
        options?: never;
        head?: never;
        /**
         * Update Document Child Segment
         * @description Update a specified document child segment
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Knowledge Base ID */
                    dataset_id: string;
                    /** @description Document ID */
                    document_id: string;
                    /** @description Segment ID */
                    segment_id: string;
                    /** @description Child Segment ID */
                    child_chunk_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Child segment content */
                        content: string;
                    };
                };
            };
            responses: {
                /** @description Successfully updated child segment */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["ChildChunk"];
                        };
                    };
                };
                400: components["responses"]["Error400"];
                403: components["responses"]["Error403"];
            };
        };
        trace?: never;
    };
    "/datasets/{dataset_id}/documents/{document_id}/segments/{segment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Document Segment
         * @description Update specified document segment
         */
        post: operations["updateSegment"];
        /**
         * Delete Document Segment
         * @description Delete specified document segment
         */
        delete: operations["deleteSegment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{dataset_id}/documents/{document_id}/upload-file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Upload File
         * @description Get upload file information of specified document
         */
        get: operations["getUploadFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{dataset_id}/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List dataset metadata
         * @description Get list of metadata fields for a dataset
         */
        get: operations["listDatasetMetadata"];
        put?: never;
        /**
         * Create metadata
         * @description Create a new metadata field
         */
        post: operations["createMetadata"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspaces/current/models/model-types/text-embedding": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Embedding Model List
         * @description Get a list of available embedding models for the current workspace
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved embedding model list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["EmbeddingModel"][];
                        };
                    };
                };
                400: components["responses"]["Error400"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{dataset_id}/metadata/{metadata_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete metadata
         * @description Delete a metadata field
         */
        delete: operations["deleteMetadata"];
        options?: never;
        head?: never;
        /**
         * Update metadata
         * @description Update an existing metadata field
         */
        patch: operations["updateMetadata"];
        trace?: never;
    };
    "/datasets/{dataset_id}/metadata/built-in/{action}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable/disable built-in metadata
         * @description Toggle built-in metadata fields
         */
        post: operations["toggleBuiltInMetadata"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datasets/{dataset_id}/documents/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update document metadata
         * @description Update metadata for multiple documents
         */
        post: operations["updateDocumentsMetadata"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @description Error code */
            code: string;
            /** @description HTTP status code */
            status: number;
            /** @description Error message description */
            message: string;
        };
        Dataset: {
            /** @description Knowledge Base ID */
            id?: string;
            /** @description Knowledge Base name */
            name?: string;
            /** @description Knowledge Base description */
            description?: string | null;
            /**
             * @description Knowledge Base provider
             * @enum {string}
             */
            provider?: "vendor" | "external";
            /**
             * @description Access permission
             * @enum {string}
             */
            permission?: "only_me" | "all_team_members" | "partial_members";
            /** @description Data source type */
            data_source_type?: string | null;
            /**
             * @description Indexing technique
             * @enum {string|null}
             */
            indexing_technique?: "high_quality" | "economy" | null;
            /** @description Number of applications */
            app_count?: number;
            /** @description Number of documents */
            document_count?: number;
            /** @description Word count */
            word_count?: number;
            /** @description Creator ID */
            created_by?: string;
            /** @description Creation timestamp */
            created_at?: number;
            /** @description Last updated by ID */
            updated_by?: string;
            /** @description Last updated timestamp */
            updated_at?: number;
            /** @description Embedding model name */
            embedding_model?: string | null;
            /** @description Embedding model provider */
            embedding_model_provider?: string | null;
            /** @description Whether embedding is available */
            embedding_available?: boolean | null;
            /** @description Retrieval model configuration */
            retrieval_model_dict?: {
                /** @description Search method */
                search_method?: string;
                /** @description Whether reranking is enabled */
                reranking_enable?: boolean;
                /** @description Reranking mode */
                reranking_mode?: string | null;
                /** @description Reranking model */
                reranking_model?: {
                    /** @description Reranking model provider */
                    reranking_provider_name?: string;
                    /** @description Reranking model name */
                    reranking_model_name?: string;
                };
                /** @description Weights */
                weights?: number | null;
                /** @description Number of results to return */
                top_k?: number;
                /** @description Whether score threshold is enabled */
                score_threshold_enabled?: boolean;
                /** @description Score threshold */
                score_threshold?: number | null;
            };
            /** @description Tags list */
            tags?: string[];
            /** @description Document form */
            doc_form?: string | null;
            /** @description External knowledge information */
            external_knowledge_info?: {
                /** @description External knowledge ID */
                external_knowledge_id?: string | null;
                /** @description External knowledge API ID */
                external_knowledge_api_id?: string | null;
                /** @description External knowledge API name */
                external_knowledge_api_name?: string | null;
                /** @description External knowledge API endpoint */
                external_knowledge_api_endpoint?: string | null;
            };
            /** @description External retrieval model */
            external_retrieval_model?: {
                /** @description Number of results to return */
                top_k?: number;
                /** @description Score threshold */
                score_threshold?: number;
                /** @description Whether score threshold is enabled */
                score_threshold_enabled?: boolean | null;
            };
        };
        DatasetList: {
            data?: components["schemas"]["Dataset"][];
            /** @description Whether there is more data */
            has_more?: boolean;
            /** @description Page size limit */
            limit?: number;
            /** @description Total record count */
            total?: number;
            /** @description Current page number */
            page?: number;
        };
        CreateDatasetRequest: {
            /** @description Knowledge Base name (required) */
            name: string;
            /** @description Knowledge Base description (optional) */
            description?: string;
            /**
             * @description Indexing mode (optional, recommended)
             *     - high_quality: High quality
             *     - economy: Economy
             *
             * @enum {string}
             */
            indexing_technique?: "high_quality" | "economy";
            /**
             * @description Permission (optional, default only_me)
             *     - only_me: Only me
             *     - all_team_members: All team members
             *     - partial_members: Partial team members
             *
             * @default only_me
             * @enum {string}
             */
            permission: "only_me" | "all_team_members" | "partial_members";
            /**
             * @description Provider (optional, default vendor)
             *     - vendor: Upload files
             *     - external: External knowledge base
             *
             * @default vendor
             * @enum {string}
             */
            provider: "vendor" | "external";
            /** @description External knowledge API_ID (optional) */
            external_knowledge_api_id?: string;
            /** @description External knowledge ID (optional) */
            external_knowledge_id?: string;
        };
        RetrievalModel: {
            /**
             * @description Search method:
             *     - keyword_search: Keyword search
             *     - semantic_search: Semantic search
             *     - full_text_search: Full text search
             *     - hybrid_search: Hybrid search
             *
             * @enum {string}
             */
            search_method?: "keyword_search" | "semantic_search" | "full_text_search" | "hybrid_search";
            /** @description Whether to enable Reranking, optional, required if retrieval mode is semantic_search or hybrid_search */
            reranking_enable?: boolean;
            /** @description Rerank model configuration, optional, required if reranking is enabled */
            reranking_model?: {
                /** @description Rerank model provider */
                reranking_provider_name?: string;
                /** @description Rerank model name */
                reranking_model_name?: string;
            };
            /**
             * Format: float
             * @description Weight setting for semantic search in hybrid search mode
             */
            weights?: number;
            /** @description Number of results returned, optional */
            top_k?: number;
            /** @description Whether to enable score threshold */
            score_threshold_enabled?: boolean;
            /**
             * Format: float
             * @description Score threshold
             */
            score_threshold?: number;
        };
        ProcessRule: {
            /**
             * @description Cleaning and segmentation mode
             * @enum {string}
             */
            mode: "automatic" | "custom";
            /** @description Custom rules (empty for automatic mode) */
            rules?: {
                /** @description Pre-processing rules */
                pre_processing_rules?: {
                    /** @description Unique identifier for preprocessing rule */
                    id?: string;
                    /** @description Whether this rule is selected */
                    enabled?: boolean;
                    /** @description Rule name */
                    name?: string;
                }[];
                /** @description Segmentation configuration */
                segmentation?: {
                    /** @description Custom segmentation identifier */
                    separator?: string;
                    /** @description Maximum length (tokens) */
                    max_tokens?: number;
                    /** @description Segment overlap */
                    chunk_overlap?: number;
                };
            };
        };
        Document: {
            /** @description Document ID */
            id?: string;
            /** @description Associated knowledge base ID */
            dataset_id?: string;
            /** @description Document name */
            name?: string;
            /** @description Data source type */
            data_source_type?: string | null;
            /**
             * @description Display status
             * @enum {string}
             */
            display_status?: "indexing" | "index_failed" | "indexed" | "cleaning" | "clean_failed" | "cleaned" | "parsing" | "parse_failed" | "parsed" | "splitting" | "split_failed" | "splitted" | "embedding" | "embedding_failed" | "embedded";
            /** @description Whether enabled */
            enabled?: boolean;
            /** @description Word count */
            word_count?: number;
            /** @description Number of segments */
            segment_count?: number | null;
            /** @description Created from */
            created_from?: string;
            /** @description Creator ID */
            created_by?: string;
            /** @description Creation timestamp */
            created_at?: number;
            /** @description Last updated timestamp */
            updated_at?: number;
            /** @description Whether archived */
            archived?: boolean;
            /** @description Batch number */
            batch?: string | null;
            /** @description Hit count */
            hit_count?: number;
        };
        Segment: {
            /** @description Segment ID */
            id?: string;
            /** @description Position */
            position?: number;
            /** @description Document ID */
            document_id?: string;
            /** @description Content */
            content?: string;
            /** @description Answer */
            answer?: string | null;
            /** @description Word count */
            word_count?: number;
            /** @description Token count */
            tokens?: number;
            /** @description Keywords */
            keywords?: string[];
            /** @description Index node ID */
            index_node_id?: string;
            /** @description Index node hash */
            index_node_hash?: string;
            /** @description Hit count */
            hit_count?: number;
            /** @description Whether enabled */
            enabled?: boolean;
            /** @description Disabled timestamp */
            disabled_at?: number | null;
            /** @description Disabled by user ID */
            disabled_by?: string | null;
            /** @description Status */
            status?: string;
            /** @description Creator ID */
            created_by?: string;
            /** @description Creation timestamp */
            created_at?: number | null;
            /** @description Indexing timestamp */
            indexing_at?: number | null;
            /** @description Completion timestamp */
            completed_at?: number | null;
            /** @description Error message */
            error?: string | null;
            /** @description Stop timestamp */
            stopped_at?: number | null;
        };
        ChildChunk: {
            /** @description Child segment ID */
            id?: string;
            /** @description Parent segment ID */
            segment_id?: string;
            /** @description Child segment content */
            content?: string;
            /** @description Word count */
            word_count?: number;
            /** @description Token count */
            tokens?: number;
            /** @description Index node ID */
            index_node_id?: string;
            /** @description Index node hash */
            index_node_hash?: string;
            /** @description Status */
            status?: string;
            /** @description Creator */
            created_by?: string;
            /** @description Creation timestamp */
            created_at?: number;
            /** @description Indexing timestamp */
            indexing_at?: number;
            /** @description Completion timestamp */
            completed_at?: number;
            /** @description Error message */
            error?: string | null;
            /** @description Stop timestamp */
            stopped_at?: number | null;
        };
        EmbeddingModel: {
            /** @description Model provider */
            provider?: string;
            /** @description Model label */
            label?: {
                /** @description Chinese label */
                zh_Hans?: string;
                /** @description English label */
                en_US?: string;
            };
            /** @description Small icon */
            icon_small?: {
                /** @description Chinese small icon */
                zh_Hans?: string;
                /** @description English small icon */
                en_US?: string;
            };
            /** @description Large icon */
            icon_large?: {
                /** @description Chinese large icon */
                zh_Hans?: string;
                /** @description English large icon */
                en_US?: string;
            };
            /** @description Status */
            status?: string;
            /** @description Model list */
            models?: {
                /** @description Model name */
                model?: string;
                /** @description Model label */
                label?: {
                    /** @description Chinese label */
                    zh_Hans?: string;
                    /** @description English label */
                    en_US?: string;
                };
                /** @description Model type */
                model_type?: string;
                /** @description Features */
                features?: Record<string, never> | null;
                /** @description Fetch source */
                fetch_from?: string;
                /** @description Model properties */
                model_properties?: {
                    /** @description Context size */
                    context_size?: number;
                };
                /** @description Whether deprecated */
                deprecated?: boolean;
                /** @description Status */
                status?: string;
                /** @description Whether load balancing is enabled */
                load_balancing_enabled?: boolean;
            }[];
        };
        UploadFile: {
            /** @description File ID */
            id?: string;
            /** @description File name */
            name?: string;
            /** @description File size */
            size?: number;
            /** @description File extension */
            extension?: string;
            /** @description Preview URL */
            url?: string;
            /** @description Download URL */
            download_url?: string;
            /** @description MIME type */
            mime_type?: string;
            /** @description Creator ID */
            created_by?: string;
            /** @description Creation timestamp */
            created_at?: number;
        };
        /**
         * @description Document configuration information in JSON string format, including the following fields:
         *     - original_document_id: Source document ID (optional), used for re-uploading or modifying document configuration
         *     - indexing_technique: Indexing method (high_quality/economy)
         *     - doc_form: Indexing content form (text_model/hierarchical_model/qa_model)
         *     - doc_language: Document language (required for Q&A mode)
         *     - process_rule: Processing rules
         *
         * @example {"indexing_technique":"high_quality","process_rule":{"rules":{"pre_processing_rules":[{"id":"remove_extra_spaces","enabled":true},{"id":"remove_urls_emails","enabled":true}],"segmentation":{"separator":"###","max_tokens":500}},"mode":"custom"}}
         *
         */
        CreateDocumentByFileRequestData: {
            /** @description Source document ID, used for re-uploading or modifying document configuration */
            original_document_id?: string;
            /**
             * @description Indexing technique
             * @enum {string}
             */
            indexing_technique?: "high_quality" | "economy";
            /**
             * @description Document form
             * @enum {string}
             */
            doc_form?: "text_model" | "hierarchical_model" | "qa_model";
            /** @description Document language (required for Q&A mode) */
            doc_language?: string;
            /** @description Processing rules */
            process_rule?: components["schemas"]["ProcessRule"];
            /** @description Retrieval model configuration */
            retrieval_model?: components["schemas"]["RetrievalModel"];
            /** @description Embedding model name */
            embedding_model?: string;
            /** @description Embedding model provider */
            embedding_model_provider?: string;
        };
        UploadDocument: {
            data_source?: {
                /**
                 * @description Document source type
                 *     - upload_file: Upload file
                 *     - notion_import: Notion import
                 *     - notion_sync: Notion sync
                 *     - web_page: Web page
                 *     - web_site: Website
                 *     - notion_page: Notion page
                 *     - github_repository: GitHub repository
                 *     Required, default: upload_file
                 *
                 * @enum {string}
                 */
                type?: "upload_file" | "notion_import" | "notion_sync" | "web_page" | "web_site" | "notion_page" | "github_repository";
                info_list?: {
                    /** @description File ID */
                    file_id?: string;
                }[];
            };
        };
        DocumentSegment: {
            /** @description Segment ID */
            id?: string;
            /** @description Document ID */
            document_id?: string;
            /** @description Segment content */
            content?: string;
            /** @description Answer (if mode is Q&A) */
            answer?: string | null;
            /** @description Word count */
            word_count?: number;
            /** @description Vector data */
            vector?: number[] | null;
            /** @description Creator */
            created_by?: string;
            /** @description Creation timestamp */
            created_at?: number;
            /** @description Last updated by */
            updated_by?: string;
            /** @description Last updated timestamp */
            updated_at?: number;
            /**
             * @description Segment status
             * @enum {string}
             */
            status?: "waiting" | "completed" | "error" | "processing";
            /** @description Indexing timestamp */
            indexing_at?: number | null;
            /** @description Completion timestamp */
            completed_at?: number | null;
            /** @description Position */
            position?: number;
        };
    };
    responses: {
        /** @description Request parameter error */
        Error400: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Permission error */
        Error403: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource conflict */
        Error409: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Request entity too large */
        Error413: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unsupported media type */
        Error415: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getDatasetList: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Number of items per page */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved knowledge base list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatasetList"];
                };
            };
            400: components["responses"]["Error400"];
        };
    };
    createEmptyDataset: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDatasetRequest"];
            };
        };
        responses: {
            /** @description Successfully created knowledge base */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Dataset"];
                };
            };
            400: components["responses"]["Error400"];
            409: components["responses"]["Error409"];
        };
    };
    deleteDataset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Knowledge Base ID */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted knowledge base */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["Error400"];
            403: components["responses"]["Error403"];
        };
    };
    retrieveDataset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Knowledge Base ID */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Search keyword */
                    query: string;
                    /** @description Retrieval parameter configuration */
                    retrieval_model?: {
                        /**
                         * @description Search method
                         * @enum {string}
                         */
                        search_method?: "keyword_search" | "semantic_search" | "full_text_search" | "hybrid_search";
                        /** @description Whether to enable Reranking */
                        reranking_enable?: boolean;
                        reranking_model?: {
                            /** @description Rerank model provider */
                            reranking_provider_name?: string;
                            /** @description Rerank model name */
                            reranking_model_name?: string;
                        };
                        /**
                         * Format: float
                         * @description Weight setting for semantic search in hybrid search mode
                         */
                        weights?: number;
                        /** @description Number of results to return */
                        top_k?: number;
                        /** @description Whether to enable score threshold */
                        score_threshold_enabled?: boolean;
                        /**
                         * Format: float
                         * @description Score threshold
                         */
                        score_threshold?: number;
                    };
                    /** @description Unused field */
                    external_retrieval_model?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Retrieval successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        query?: {
                            /** @description Search keyword */
                            content?: string;
                        };
                        records?: {
                            segment?: {
                                id?: string;
                                position?: number;
                                document_id?: string;
                                content?: string;
                                answer?: string | null;
                                word_count?: number;
                                tokens?: number;
                                keywords?: string[];
                                index_node_id?: string;
                                index_node_hash?: string;
                                hit_count?: number;
                                enabled?: boolean;
                                disabled_at?: number | null;
                                disabled_by?: string | null;
                                status?: string;
                                created_by?: string;
                                created_at?: number | null;
                                indexing_at?: number | null;
                                completed_at?: number | null;
                                error?: string | null;
                                stopped_at?: number | null;
                                document?: {
                                    id?: string;
                                    data_source_type?: string;
                                    name?: string;
                                };
                            };
                            /** Format: float */
                            score?: number;
                            tsne_position?: Record<string, never> | null;
                        }[];
                    };
                };
            };
            400: components["responses"]["Error400"];
            403: components["responses"]["Error403"];
        };
    };
    createDocumentByText: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Knowledge Base ID */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Document name */
                    name: string;
                    /** @description Document content */
                    text: string;
                    /**
                     * @description Indexing technique
                     * @enum {string}
                     */
                    indexing_technique: "high_quality" | "economy";
                    /**
                     * @description Document form
                     * @enum {string}
                     */
                    doc_form?: "text_model" | "hierarchical_model" | "qa_model";
                    /** @description Document language (required for Q&A mode) */
                    doc_language?: string;
                    process_rule: components["schemas"]["ProcessRule"];
                };
            };
        };
        responses: {
            /** @description Successfully created document */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        document?: components["schemas"]["Document"];
                        batch?: string;
                    };
                };
            };
            400: components["responses"]["Error400"];
            413: components["responses"]["Error413"];
            415: components["responses"]["Error415"];
        };
    };
    createDocumentByFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Knowledge Base ID */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: json
                     * @description Document configuration information in JSON string format, see CreateDocumentByFileRequestData schema for details
                     */
                    data?: string;
                    /**
                     * Format: binary
                     * @description File to be uploaded
                     */
                    file: string;
                };
            };
        };
        responses: {
            /** @description Successfully created document */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        document?: components["schemas"]["Document"];
                        /** @description Document batch number */
                        batch?: string;
                    };
                };
            };
            400: components["responses"]["Error400"];
            413: components["responses"]["Error413"];
            415: components["responses"]["Error415"];
        };
    };
    updateDocumentByText: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Knowledge Base ID */
                dataset_id: string;
                /** @description Document ID */
                document_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Document name */
                    name?: string;
                    /** @description Document content */
                    text?: string;
                    /**
                     * @description Indexing technique
                     * @enum {string}
                     */
                    indexing_technique?: "high_quality" | "economy";
                    /**
                     * @description Document form
                     * @enum {string}
                     */
                    doc_form?: "text_model" | "hierarchical_model" | "qa_model";
                    /** @description Document language (required for Q&A mode) */
                    doc_language?: string;
                    /** @description Processing rules */
                    process_rule?: components["schemas"]["ProcessRule"];
                };
            };
        };
        responses: {
            /** @description Successfully updated document */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        document?: components["schemas"]["Document"];
                        batch?: string;
                    };
                };
            };
            400: components["responses"]["Error400"];
            403: components["responses"]["Error403"];
        };
    };
    updateDocumentByFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Knowledge Base ID */
                dataset_id: string;
                /** @description Document ID */
                document_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** @description Document name */
                    name?: string;
                    /**
                     * Format: binary
                     * @description File to be uploaded
                     */
                    file: string;
                    process_rule?: components["schemas"]["ProcessRule"];
                };
            };
        };
        responses: {
            /** @description Successfully updated document */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        document?: components["schemas"]["Document"];
                        batch?: string;
                    };
                };
            };
            400: components["responses"]["Error400"];
            403: components["responses"]["Error403"];
            413: components["responses"]["Error413"];
            415: components["responses"]["Error415"];
        };
    };
    getDocumentIndexingStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Knowledge Base ID */
                dataset_id: string;
                /** @description Document batch number */
                batch: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved indexing status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            id?: string;
                            indexing_status?: string;
                            /** Format: float */
                            processing_started_at?: number;
                            /** Format: float */
                            parsing_completed_at?: number;
                            /** Format: float */
                            cleaning_completed_at?: number;
                            /** Format: float */
                            splitting_completed_at?: number;
                            /** Format: float */
                            completed_at?: number | null;
                            /** Format: float */
                            paused_at?: number | null;
                            error?: string | null;
                            /** Format: float */
                            stopped_at?: number | null;
                            completed_segments?: number;
                            total_segments?: number;
                        }[];
                    };
                };
            };
            400: components["responses"]["Error400"];
            403: components["responses"]["Error403"];
        };
    };
    getDocumentList: {
        parameters: {
            query?: {
                /** @description Search keyword */
                keyword?: string;
                /** @description Page number */
                page?: number;
                /** @description Items per page */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Knowledge Base ID */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved document list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Document"][];
                        has_more?: boolean;
                        limit?: number;
                        total?: number;
                        page?: number;
                    };
                };
            };
            400: components["responses"]["Error400"];
        };
    };
    deleteDocument: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Knowledge Base ID */
                dataset_id: string;
                /** @description Document ID */
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted document */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        result?: "success";
                    };
                };
            };
            400: components["responses"]["Error400"];
            403: components["responses"]["Error403"];
        };
    };
    getSegments: {
        parameters: {
            query?: {
                /** @description Search keyword */
                keyword?: string;
                /** @description Segment status */
                status?: "completed";
                /** @description Page numbers */
                page?: number;
                /** @description Items per page */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Knowledge Base ID */
                dataset_id: string;
                /** @description Document ID */
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved segment list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Segment"][];
                        doc_form?: string;
                        has_more?: boolean;
                        limit?: number;
                        total?: number;
                        page?: number;
                    };
                };
            };
            400: components["responses"]["Error400"];
        };
    };
    createSegments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Knowledge Base ID */
                dataset_id: string;
                /** @description Document ID */
                document_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    segments: {
                        /** @description Text content/question content */
                        content: string;
                        /** @description Answer content, optional, required if knowledge base is in Q&A mode */
                        answer?: string;
                        /** @description Keyword list, optional */
                        keywords?: string[];
                    }[];
                };
            };
        };
        responses: {
            /** @description Successfully created segment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Segment"][];
                        doc_form?: string;
                    };
                };
            };
            400: components["responses"]["Error400"];
            403: components["responses"]["Error403"];
        };
    };
    updateSegment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Knowledge Base ID */
                dataset_id: string;
                /** @description Document ID */
                document_id: string;
                /** @description Segment ID */
                segment_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    segment: {
                        /** @description Text content/question content */
                        content?: string;
                        /** @description Answer content (required for Q&A mode) */
                        answer?: string;
                        /** @description Keyword list */
                        keywords?: string[];
                        /** @description Whether enabled */
                        enabled?: boolean;
                        /** @description Whether to regenerate child segments */
                        regenerate_child_chunks?: boolean;
                    };
                };
            };
        };
        responses: {
            /** @description Successfully updated segment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Segment"];
                        doc_form?: string;
                    };
                };
            };
            400: components["responses"]["Error400"];
            403: components["responses"]["Error403"];
        };
    };
    deleteSegment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Knowledge Base ID */
                dataset_id: string;
                /** @description Document ID */
                document_id: string;
                /** @description Segment ID */
                segment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted segment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        result?: "success";
                    };
                };
            };
            400: components["responses"]["Error400"];
            403: components["responses"]["Error403"];
        };
    };
    getUploadFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Knowledge Base ID */
                dataset_id: string;
                /** @description Document ID */
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved file information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadFile"];
                };
            };
            400: components["responses"]["Error400"];
            403: components["responses"]["Error403"];
        };
    };
    listDatasetMetadata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        doc_metadata?: {
                            id?: string;
                            name?: string;
                            type?: string;
                            use_count?: number;
                        }[];
                        built_in_field_enabled?: boolean;
                    };
                };
            };
        };
    };
    createMetadata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Metadata type */
                    type: string;
                    /** @description Metadata name */
                    name: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: string;
                        type?: string;
                        name?: string;
                    };
                };
            };
        };
    };
    deleteMetadata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
                metadata_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateMetadata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
                metadata_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description New metadata name */
                    name: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id?: string;
                        type?: string;
                        name?: string;
                    };
                };
            };
        };
    };
    toggleBuiltInMetadata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
                action: "enable" | "disable";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateDocumentsMetadata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description List of document metadata operations */
                    operation_data?: {
                        /** @description Document ID */
                        document_id: string;
                        /** @description List of metadata to update */
                        metadata_list: {
                            /** @description Metadata ID */
                            id?: string;
                            /** @description Metadata type */
                            type?: string;
                            /** @description Metadata value */
                            value?: string;
                            /** @description Metadata name */
                            name?: string;
                        }[];
                    }[];
                };
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
