/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/workflows/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute Workflow
         * @description Execute a workflow. Cannot be executed if there is no published workflow.
         */
        post: operations["runWorkflow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/run/{workflow_run_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Workflow Execution Status
         * @description Get the current execution result of a workflow task based on the workflow execution ID
         */
        get: operations["getWorkflowExecutionStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/tasks/{task_id}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stop Response
         * @description Only supports streaming mode
         */
        post: operations["stopWorkflow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Workflow Logs
         * @description Return workflow logs in reverse order
         */
        get: operations["getWorkflowLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload File
         * @description Upload a file to use when sending messages, enabling multimodal understanding. Supports any format supported by your workflow. Uploaded files are only available to the current end user.
         */
        post: operations["uploadFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Application Basic Information
         * @description Used to get basic information about the application
         */
        get: operations["getAppInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parameters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Application Parameters
         * @description Used at the beginning of page entry to get feature switches, input parameter names, types, and default values
         */
        get: operations["getAppParameters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @description Error code */
            code: string;
            /** @description HTTP status code */
            status: number;
            /** @description Error message description */
            message: string;
        };
        Usage: {
            /** @description Number of tokens used for prompts */
            prompt_tokens?: number;
            /** @description Number of tokens used for completion */
            completion_tokens?: number;
            /** @description Total number of tokens used */
            total_tokens?: number;
            /** @description Unit price for prompts */
            prompt_unit_price?: string;
            /** @description Price unit for prompts */
            prompt_price_unit?: string;
            /** @description Total price for prompts */
            prompt_price?: string;
            /** @description Unit price for completion */
            completion_unit_price?: string;
            /** @description Price unit for completion */
            completion_price_unit?: string;
            /** @description Total price for completion */
            completion_price?: string;
            /** @description Total price */
            total_price?: string;
            /** @description Currency unit */
            currency?: string;
            /** @description Latency time */
            latency?: number;
        };
        RetrieverResource: {
            /** @description Position */
            position?: number;
            /** @description Dataset ID */
            dataset_id?: string;
            /** @description Dataset name */
            dataset_name?: string;
            /** @description Document ID */
            document_id?: string;
            /** @description Document name */
            document_name?: string;
            /** @description Segment ID */
            segment_id?: string;
            /** @description Relevance score */
            score?: number;
            /** @description Content */
            content?: string;
        };
        WorkflowMessage: {
            /** @description Workflow execution ID */
            workflow_run_id?: string;
            /** @description Task ID */
            task_id?: string;
            data?: {
                /** @description Workflow execution ID */
                id?: string;
                /** @description Associated Workflow ID */
                workflow_id?: string;
                /**
                 * @description Execution status
                 * @enum {string}
                 */
                status?: "running" | "succeeded" | "failed" | "stopped";
                /** @description Output content */
                outputs?: Record<string, never>;
                /** @description Error reason */
                error?: string;
                /** @description Elapsed time (s) */
                elapsed_time?: number;
                /** @description Total tokens used */
                total_tokens?: number;
                /** @description Total steps */
                total_steps?: number;
                /** @description Start time */
                created_at?: number;
                /** @description End time */
                finished_at?: number;
            };
        };
        StreamEvent: {
            /**
             * @description Event type, including the following types:
             *     - `event: workflow_started` workflow execution starts
             *     - `event: node_started` node execution starts
             *     - `event: node_finished` node execution ends, success or failure with different statuses in the same event
             *     - `event: workflow_finished` workflow execution ends, success or failure with different statuses in the same event
             *     - `event: tts_message` TTS audio stream event, i.e., speech synthesis output. The content is an audio block in Mp3 format, encoded as a base64 string, which can be directly decoded when playing. (Only present when auto-play is enabled)
             *     - `event: tts_message_end` TTS audio stream end event, receiving this event indicates the end of the audio stream return.
             *     - `event: ping` ping event every 10s, keeps the connection alive.
             *
             * @enum {string}
             */
            event?: "workflow_started" | "node_started" | "node_finished" | "workflow_finished" | "tts_message" | "tts_message_end" | "ping";
            /** @description Task ID */
            task_id?: string;
            /** @description Unique message ID */
            message_id?: string;
            /** @description Conversation ID */
            conversation_id?: string;
            /** @description Workflow execution ID */
            workflow_run_id?: string;
            /** @description Response content */
            answer?: string;
            /** @description Voice synthesis audio data (base64 encoded) */
            audio?: string;
            /** @description Event related data */
            data?: {
                /** @description Workflow execution ID or node execution ID */
                id?: string;
                /** @description Associated Workflow ID */
                workflow_id?: string;
                /** @description Node ID */
                node_id?: string;
                /** @description Node type */
                node_type?: string;
                /** @description Node name */
                title?: string;
                /** @description Execution sequence number, used to display Tracing Node order */
                index?: number;
                /** @description Predecessor node ID, used to display execution path on canvas */
                predecessor_node_id?: string;
                /** @description All predecessor node variable content used in the node */
                inputs?: Record<string, never>;
                /** @description Node process data */
                process_data?: Record<string, never>;
                /** @description Output content */
                outputs?: Record<string, never>;
                /**
                 * @description Execution status
                 * @enum {string}
                 */
                status?: "running" | "succeeded" | "failed" | "stopped";
                /** @description Error reason */
                error?: string;
                /** @description Elapsed time (s) */
                elapsed_time?: number;
                /** @description Metadata */
                execution_metadata?: {
                    /** @description Total tokens used */
                    total_tokens?: number;
                    /** @description Total price */
                    total_price?: number;
                    /** @description Currency, such as USD / RMB */
                    currency?: string;
                };
                /** @description Auto-incrementing sequence number, starting from 1 within the App */
                sequence_number?: number;
                /** @description Total steps */
                total_steps?: number;
                /** @description Total tokens used */
                total_tokens?: number;
                /** @description Start time */
                created_at?: number;
                /** @description End time */
                finished_at?: number;
            };
            metadata?: {
                usage?: components["schemas"]["Usage"];
                retriever_resources?: components["schemas"]["RetrieverResource"][];
            };
            /** @description Creation timestamp */
            created_at?: number;
        };
        FileInput: {
            /**
             * @description File type
             * @enum {string}
             */
            type?: "document" | "image" | "audio" | "video" | "custom";
            /**
             * @description Transfer method
             * @enum {string}
             */
            transfer_method?: "remote_url" | "local_file";
            /** @description Remote URL */
            url?: string;
            /** @description Upload file ID */
            upload_file_id?: string;
        };
    };
    responses: {
        /** @description Request error */
        Error400: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Non authorized or authentication failed */
        Error401: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        Error404: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Server error */
        Error500: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    runWorkflow: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Allows passing values for variables defined in the App.
                     *     The inputs parameter contains multiple key/value pairs, where each key corresponds to a specific variable and each value is the specific value for that variable. Variables can be of file list type.
                     *     File list type variables are suitable for passing files combined with text understanding to answer questions, only available when the model supports parsing capabilities for that type of file. If the variable is a file list type, the value corresponding to the variable should be in list format, where each element should include the following:
                     *       - `type` (string) Supported types:
                     *         - `document` Specific types include: 'TXT', 'MD', 'MARKDOWN', 'PDF', 'HTML', 'XLSX', 'XLS', 'DOCX', 'CSV', 'EML', 'MSG', 'PPTX', 'PPT', 'XML', 'EPUB'
                     *         - `image` Specific types include: 'JPG', 'JPEG', 'PNG', 'GIF', 'WEBP', 'SVG'
                     *         - `audio` Specific types include: 'MP3', 'M4A', 'WAV', 'WEBM', 'AMR'
                     *         - `video` Specific types include: 'MP4', 'MOV', 'MPEG', 'MPGA'
                     *         - `custom` Specific types include: other file types
                     *       - `transfer_method` (string) Transfer method, `remote_url` image address / `local_file` uploaded file
                     *       - `url` (string) Image address (only when the transfer method is `remote_url`)
                     *       - `upload_file_id` (string) Upload file ID (only when the transfer method is `local_file`)
                     *      */
                    inputs: Record<string, never>;
                    /**
                     * @description Response mode, supports:
                     *     - `streaming` Streaming mode (recommended). Implements streaming return similar to typewriter output based on SSE (Server-Sent Events).
                     *     - `blocking` Blocking mode, waits for execution to complete before returning results. (Requests may be interrupted if the process is lengthy).
                     *     Due to Cloudflare limitations, requests will be interrupted after 100 seconds of timeout with no response.
                     *
                     * @enum {string}
                     */
                    response_mode: "streaming" | "blocking";
                    /** @description User identifier, used to define the identity of the end user, for easy retrieval and statistics.
                     *     Rules defined by the developer, the user identifier must be unique within the application.
                     *      */
                    user: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowMessage"];
                    "text/event-stream": components["schemas"]["StreamEvent"];
                };
            };
            400: components["responses"]["Error400"];
            404: components["responses"]["Error404"];
            500: components["responses"]["Error500"];
        };
    };
    getWorkflowExecutionStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Workflow run ID, can be obtained from the streaming response chunks */
                workflow_run_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved workflow execution status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Workflow execution ID */
                        id?: string;
                        /** @description Associated Workflow ID */
                        workflow_id?: string;
                        /**
                         * @description Execution status
                         * @enum {string}
                         */
                        status?: "running" | "succeeded" | "failed" | "stopped";
                        /** @description Task input content */
                        inputs?: string;
                        /** @description Task output content */
                        outputs?: string;
                        /** @description Error reason */
                        error?: string;
                        /** @description Total steps executed in the task */
                        total_steps?: number;
                        /** @description Total tokens used in the task */
                        total_tokens?: number;
                        /** @description Task start time */
                        created_at?: number;
                        /** @description Task end time */
                        finished_at?: number;
                        /**
                         * Format: float
                         * @description Time elapsed (seconds)
                         */
                        elapsed_time?: number;
                    };
                };
            };
            400: components["responses"]["Error400"];
            401: components["responses"]["Error401"];
            404: components["responses"]["Error404"];
            500: components["responses"]["Error500"];
        };
    };
    stopWorkflow: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Task ID, can be obtained from the streaming response chunks */
                task_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description User identifier, must be consistent with the user passed in the message sending interface */
                    user: string;
                };
            };
        };
        responses: {
            /** @description Successfully stopped the response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Fixed return value 'success' */
                        result?: string;
                    };
                };
            };
            400: components["responses"]["Error400"];
            401: components["responses"]["Error401"];
            404: components["responses"]["Error404"];
            500: components["responses"]["Error500"];
        };
    };
    getWorkflowLogs: {
        parameters: {
            query?: {
                /** @description Keyword */
                keyword?: string;
                /** @description Execution status: succeeded/failed/stopped */
                status?: "succeeded" | "failed" | "stopped";
                /** @description Current page number, default 1 */
                page?: number;
                /** @description Items per page, default 20 */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved workflow logs */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Current page number */
                        page?: number;
                        /** @description Items per page */
                        limit?: number;
                        /** @description Total number of records */
                        total?: number;
                        /** @description Whether there is more data */
                        has_more?: boolean;
                        /** @description Data for the current page */
                        data?: {
                            /** @description Identifier */
                            id?: string;
                            /** @description Workflow execution log */
                            workflow_run?: {
                                /** @description Identifier */
                                id?: string;
                                /** @description Version */
                                version?: string;
                                /**
                                 * @description Execution status
                                 * @enum {string}
                                 */
                                status?: "running" | "succeeded" | "failed" | "stopped";
                                /** @description Error */
                                error?: string;
                                /**
                                 * Format: float
                                 * @description Time elapsed, in seconds
                                 */
                                elapsed_time?: number;
                                /** @description Number of tokens consumed */
                                total_tokens?: number;
                                /** @description Number of execution steps */
                                total_steps?: number;
                                /** @description Start time */
                                created_at?: number;
                                /** @description End time */
                                finished_at?: number;
                            };
                            /** @description Source */
                            created_from?: string;
                            /** @description Role */
                            created_by_role?: string;
                            /** @description Account */
                            created_by_account?: string;
                            /** @description User */
                            created_by_end_user?: {
                                /** @description Identifier */
                                id?: string;
                                /** @description Type */
                                type?: string;
                                /** @description Whether anonymous */
                                is_anonymous?: boolean;
                                /** @description Session identifier */
                                session_id?: string;
                            };
                            /** @description Creation time */
                            created_at?: number;
                        }[];
                    };
                };
            };
            400: components["responses"]["Error400"];
            401: components["responses"]["Error401"];
            404: components["responses"]["Error404"];
            500: components["responses"]["Error500"];
        };
    };
    uploadFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description File to upload
                     */
                    file: string;
                    /** @description User identifier, used to define the identity of the end user, must be consistent with the user passed in the message sending interface */
                    user: string;
                };
            };
        };
        responses: {
            /** @description File uploaded successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description ID
                         */
                        id?: string;
                        /** @description File name */
                        name?: string;
                        /** @description File size (bytes) */
                        size?: number;
                        /** @description File extension */
                        extension?: string;
                        /** @description File mime-type */
                        mime_type?: string;
                        /**
                         * Format: uuid
                         * @description Uploader ID
                         */
                        created_by?: string;
                        /** @description Upload time */
                        created_at?: number;
                    };
                };
            };
            400: components["responses"]["Error400"];
            401: components["responses"]["Error401"];
            /** @description File too large */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unsupported file type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            500: components["responses"]["Error500"];
            /** @description Storage service error */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getAppInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved application information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Application name */
                        name?: string;
                        /** @description Application description */
                        description?: string;
                        /** @description Application tags */
                        tags?: string[];
                    };
                };
            };
            400: components["responses"]["Error400"];
            401: components["responses"]["Error401"];
            404: components["responses"]["Error404"];
            500: components["responses"]["Error500"];
        };
    };
    getAppParameters: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved application parameters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description User input form configuration */
                        user_input_form?: {
                            /** @description Text input control */
                            "text-input"?: {
                                /** @description Control display label name */
                                label?: string;
                                /** @description Control ID */
                                variable?: string;
                                /** @description Whether required */
                                required?: boolean;
                                /** @description Default value */
                                default?: string;
                            };
                            /** @description Paragraph text input control */
                            paragraph?: {
                                /** @description Control display label name */
                                label?: string;
                                /** @description Control ID */
                                variable?: string;
                                /** @description Whether required */
                                required?: boolean;
                                /** @description Default value */
                                default?: string;
                            };
                            /** @description Dropdown control */
                            select?: {
                                /** @description Control display label name */
                                label?: string;
                                /** @description Control ID */
                                variable?: string;
                                /** @description Whether required */
                                required?: boolean;
                                /** @description Default value */
                                default?: string;
                                /** @description Option values */
                                options?: string[];
                            };
                        }[];
                        /** @description File upload configuration */
                        file_upload?: {
                            /** @description Image settings */
                            image?: {
                                /** @description Whether enabled */
                                enabled?: boolean;
                                /** @description Image quantity limit, default 3 */
                                number_limits?: number;
                                /** @description Transfer method list */
                                transfer_methods?: ("remote_url" | "local_file")[];
                            };
                        };
                        /** @description System parameters */
                        system_parameters?: {
                            /** @description Document upload size limit (MB) */
                            file_size_limit?: number;
                            /** @description Image file upload size limit (MB) */
                            image_file_size_limit?: number;
                            /** @description Audio file upload size limit (MB) */
                            audio_file_size_limit?: number;
                            /** @description Video file upload size limit (MB) */
                            video_file_size_limit?: number;
                        };
                    };
                };
            };
            400: components["responses"]["Error400"];
            401: components["responses"]["Error401"];
            404: components["responses"]["Error404"];
            500: components["responses"]["Error500"];
        };
    };
}
